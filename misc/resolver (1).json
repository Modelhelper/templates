{
  "Key": "a54200df-f7b3-4b33-9bf9-521a3a5af63f",
  "Name": "repositotory-model-full",
  "Description": "Creates a <Entity>Type file based on ObjectGraphType for GraphQL",
  "Language": "cs",
  "CanExport": true,
  "ExportFileName": "{{model.Table.Name | UpperCamel | Singular}}Resolver.cs",
  "ExportType": "gql.resolvers",
  "TemplateType": 0,
  "Groups": [
    "HCGraphQLCore", "cs-gql-hc-complete"
  ],
  "Tags": ["GraphQL", "Api", "Core"],
  "typeMapper": "points to name",
  "dictionary": [
    { "key": "string", "value": "StringType"},
    { "key": "DateTime", "value": "DateTimeGraphType"}
  ],
  "Body": [
    "using System.Threading;",
    "using System.Threading.Tasks;",
    "using System.Collections.Generic;",
    "using HotChocolate;",
    "using HotChocolate.Resolvers;",
    "using HotChocolate.Types;",
    "using {{model.Namespaces[\"api.repositories\"]}};",
    "using {{model.Namespaces[\"api.models\"]}};",
    "{% capture repo %}{{ model.Table.Name | LowerCamel | Singular }}Repository{% endcapture %}",
    "namespace {{model.Namespaces[\"gql.resolvers\"]}}",
    "{",
    "\t[ExtendObjectType(nameof({{ model.Table.Name | UpperCamel | Singular }}))]",
    "\t[GraphQLDescription(\"{{model.Table.Description}}\")]",
    "\tpublic class {{model.Table.Name | UpperCamel | Singular}}Resolver",
    "\t{",
      "{%- for child in model.Table.ChildRelations -%}{%- if child.GroupIndex == 1 -%}",
          "\t\tpublic async Task<IEnumerable<{{ child.Name | UpperCamel | Singular }}>> Get{{ child.ModelName | UpperCamel | Plural }}([Parent] {{ model.Table.Name | UpperCamel | Singular }} {{ model.Table.Name | LowerCamel | Singular }}, IResolverContext resolverContext,",
          "\t\t\t[Service] I{{ model.Table.Name | UpperCamel | Singular }}Repository {{ repo }}, CancellationToken cancellationToken)",
          "\t\t{",
          "\t\t\treturn await resolverContext",
          "\t\t\t\t.BatchDataLoader<int, IEnumerable<{{ child.Name | UpperCamel | Singular }}>>((keys, token) => {{ repo }}.Get{{child.ModelName | UpperCamel | Plural}}By{{ model.Table.Name | UpperCamel | Singular }}Id(keys, token))",
          "\t\t\t\t.LoadAsync({{ model.Table.Name | LowerCamel | Singular }}.{{ child.ChildColumnName | UpperCamel | Singular }}, cancellationToken);",
          "\t\t}",
          "",
      "{% endif -%}{%- endfor %}",
      "{%- for parent in model.Table.ParentRelations -%}{%- if parent.GroupIndex == 1 -%}",
          "\t\tpublic async Task<{{ parent.Name | UpperCamel | Singular }}> Get{{ parent.ModelName | UpperCamel | Singular }}([Parent] {{ model.Table.Name | UpperCamel | Singular }} {{ model.Table.Name | LowerCamel | Singular }}, IResolverContext resolverContext,",
          "\t\t\t[Service] I{{ model.Table.Name | UpperCamel | Singular }}Repository {{ repo }}, CancellationToken cancellationToken)",
          "\t\t{",
          "{%- if parent.ChildColumnNullable %}\t\t\tif(!{{ model.Table.Name | LowerCamel | Singular }}.{{ parent.ChildColumnName | UpperCamel | Singular }}.HasValue) return null;\n{% endif -%}",
          "\t\t\treturn await resolverContext",
          "\t\t\t\t.BatchDataLoader<int, {{ parent.Name | UpperCamel | Singular }}>((keys, token) => {{ repo }}.Get{{parent.ModelName | UpperCamel | Plural}}(keys, token))",
          "\t\t\t\t.LoadAsync({{ model.Table.Name | LowerCamel | Singular }}.{{ parent.ChildColumnName | UpperCamel | Singular }}{%- if parent.ChildColumnNullable %}.Value{% endif -%}, cancellationToken);",
          "\t\t}",
          "",
      "{% endif -%}{%- endfor %}",
    "\t}",
    "}"
  ]
}
