{
  "Key": "a54200df-f7b3-4b33-9bf9-521a3a5af63f",
  "Name": "repositotory-model-full",
  "Description": "Creates a <Entity>Type file based on ObjectGraphType for GraphQL",
  "Language": "cs",
  "CanExport": true,
  "ExportFileName": "I{{model.Table.Name | UpperCamel | Singular}}Repository.cs",
  "ExportType": "api.repositories",
  "TemplateType": 0,
  "Groups": [
    "HCGraphQLCore", "cs-gql-hc-complete"
  ],
  "Tags": ["GraphQL", "Api", "Core"],
  "typeMapper": "points to name",
  "dictionary": [
    { "key": "string", "value": "StringType"},
    { "key": "DateTime", "value": "DateTimeGraphType"}
  ],
  "Body": [
    "using System.Collections.Generic;",
    "using System.Threading;",
    "using System.Threading.Tasks;",
    "using {{model.Namespaces[\"api.models\"]}};",
    "{% capture repo %}{{ model.Table.Name | LowerCamel | Singular }}Repository{% endcapture %}",
    "namespace {{model.Namespaces[\"api.repositories\"]}}",
    "{",
    
    "\tpublic interface I{{ model.Table.Name | UpperCamel | Singular }}Repository",
    "\t{",
    "Task<IReadOnlyList<{{ model.Table.Name | UpperCamel | Singular }}>> Get{{ model.Table.Name | UpperCamel | Plural }}(int? skip, int? take, CancellationToken cancellationToken);",
    "",
    "{%- for i in model.Table.Columns %}{%- if i.IsPrimaryKey == true %}",
    "\t\tTask<IReadOnlyDictionary<int, {{ model.Table.Name | UpperCamel | Singular }}>> Get{{ model.Table.Name | UpperCamel | Plural }}(IEnumerable<int> {{ i.Name | LowerCamel | Plural }}, CancellationToken cancellationToken);",
    "{% endif -%}{% endfor -%}",
    "",
    "{%- for child in model.Table.ChildRelations -%}{%- if child.GroupIndex == 1 -%}",
    "\t\tTask<IReadOnlyDictionary<int, IEnumerable<{{ child.Name | UpperCamel | Singular }}>>> Get{{ child.ModelName | UpperCamel | Plural }}By{{ model.Table.Name | UpperCamel | Singular }}Id(IEnumerable<int> {{ model.Table.Name | LowerCamel | Singular }}Ids, CancellationToken cancellationToken);",
    "",
    "{% endif -%}{%- endfor %}",

    "{%- for parent in model.Table.ParentRelations -%}{%- if parent.GroupIndex == 1 -%}",
    "{%- for col in parent.Columns -%}{%- if col.IsPrimaryKey -%}",
    "\t\tTask<IReadOnlyDictionary<int, {{ parent.Name | UpperCamel | Singular }}>> Get{{ parent.ModelName | UpperCamel | Plural }}(IEnumerable<int> {{ col.Name | LowerCamel | Plural }}, CancellationToken cancellationToken);",
    "",
    "{%- endif -%}{%- endfor -%}",
    "{% endif -%}{%- endfor %}",
    "\t}",
    "}"
  ]
}
 
