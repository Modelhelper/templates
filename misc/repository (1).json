{
  "Key": "a54200df-f7b3-4b33-9bf9-521a3a5af63f",
  "Name": "repositotory-model-full",
  "Description": "Creates a <Entity>Type file based on ObjectGraphType for GraphQL",
  "Language": "cs",
  "CanExport": true,
  "ExportFileName": "{{model.Table.Name | UpperCamel | Singular}}Repository.cs",
  "ExportType": "api.repositories",
  "TemplateType": 0,
  "Groups": [
    "HCGraphQLCore",
    "cs-gql-hc-complete"
  ],
  "Tags": [
    "GraphQL",
    "Api",
    "Core"
  ],
  "typeMapper": "points to name",
  "dictionary": [
    {
      "key": "string",
      "value": "StringType"
    },
    {
      "key": "DateTime",
      "value": "DateTimeGraphType"
    }
  ],
  "Body": [
    "using System;",
    "using System.Collections.Generic;",
    "using System.Linq;",
    "using System.Threading;",
    "using System.Threading.Tasks;",
    "using Dapper;",
    "using {{model.Namespaces[\"api.data\"]}};",
    "using {{model.Namespaces[\"api.models\"]}};",
    "{% capture repo %}{{ model.Table.Name | LowerCamel | Singular }}Repository{% endcapture %}",
    "namespace {{model.Namespaces[\"api.repositories\"]}}",
    "{",
    "\tpublic class {{ model.Table.Name | UpperCamel | Singular }}Repository : I{{ model.Table.Name | UpperCamel | Singular }}Repository",
    "\t{",
    "\t\tprivate IConnectionFactory _connectionFactory;",
    "",
    "\t\tpublic {{ model.Table.Name | UpperCamel | Singular }}Repository(IConnectionFactory connectionFactory)",
    "\t\t{",
    "\t\t\t_connectionFactory = connectionFactory;",
    "\t\t}",
    "",
    "\t\tpublic async Task<IReadOnlyList<{{ model.Table.Name | UpperCamel | Singular }}>> Get{{ model.Table.Name | UpperCamel | Plural }}(int? skip, int? take, CancellationToken cancellationToken)",
    "\t\t{",
    "\t\t\tconst string query = @\"",
    "\t\t\t\tSELECT *", 
    "\t\t\t\tFROM [{{ model.Table.Schema }}].[{{ model.Table.Name }}]",
    "\t\t\t\tORDER BY CreatedDate DESC",
    "\t\t\t\tOFFSET @Skip ROWS FETCH NEXT @Take ROWS ONLY\";",
    "\t\t\tvar offset = skip ?? 0;",
    "\t\t\tvar fetch = take ?? 0;",
    "\t\t\treturn (await QueryAsync<Order>(query, new {Take = fetch, Skip = offset}, cancellationToken)).ToList();",
    "\t\t}",
    "{%- for i in model.Table.Columns %}{%- if i.IsPrimaryKey %}",
    "\t\tpublic async Task<IReadOnlyDictionary<int, {{ model.Table.Name | UpperCamel | Singular }}>> Get{{ model.Table.Name | UpperCamel | Plural }}(IEnumerable<int> {{ i.Name | LowerCamel | Plural }}, CancellationToken cancellationToken)",
    "\t\t{",
    "\t\t\tconst string query = \"SELECT * FROM [{{ model.Table.Schema }}].[{{ model.Table.Name }}] WHERE [{{ i.Name }}] IN @{{ i.Name | UpperCamel | Plural }}\";",
    "\t\t\treturn await QueryKeysToItems<int, {{ model.Table.Name }}>(query, new { {{ i.Name | UpperCamel | Plural }} = {{ i.Name | LowerCamel | Plural }} }, i => i.{{ i.Name | UpperCamel | Singular }}, cancellationToken);",
    "\t\t}",
    "{% endif -%}{% endfor -%}",
    "",
    "{%- for child in model.Table.ChildRelations -%}{%- if child.GroupIndex == 1 -%}",
    "\t\tpublic async Task<IReadOnlyDictionary<int, IEnumerable<{{ child.Name | UpperCamel | Singular }}>>> Get{{ child.ModelName | UpperCamel | Plural }}By{{ model.Table.Name | UpperCamel | Singular }}Id(IEnumerable<int> {{ model.Table.Name | LowerCamel | Singular }}Ids, CancellationToken cancellationToken)",
    "\t\t{",
    "\t\t\tconst string query = \"SELECT * FROM [{{ child.Schema }}].[{{ child.Name }}] WHERE [{{ child.ChildColumnName }}] IN @{{ child.ChildColumnName | UpperCamel | Plural }}\";",
    "\t\t\treturn await QueryKeysToLists<int, {{ child.Name | UpperCamel | Singular }}>(query, new { {{ child.ChildColumnName | UpperCamel | Plural }} = {{ child.ParentColumnName | LowerCamel | Plural }} }, i => i.{{ child.ChildColumnName | UpperCamel | Singular }}{%- if child.ChildColumnNullable == true %}.Value{% endif -%}, cancellationToken);",
    "\t\t}",
    "",
    "{% endif -%}{%- endfor %}",
    "{%- for parent in model.Table.ParentRelations -%}{%- if parent.GroupIndex == 1 -%}",
    "{%- for col in parent.Columns -%}{%- if col.IsPrimaryKey -%}",
    "\t\tpublic async Task<IReadOnlyDictionary<int, {{ parent.Name | UpperCamel | Singular }}>> Get{{ parent.ModelName | UpperCamel | Plural }}(IEnumerable<int> {{ col.Name | LowerCamel | Plural }}, CancellationToken cancellationToken)",
    "\t\t{",
    "\t\t\tconst string query = \"SELECT * FROM [{{ parent.Schema }}].[{{ parent.Name }}] WHERE [{{ col.Name }}] IN @{{ col.Name | UpperCamel | Plural }}\";",
    "\t\t\treturn await QueryKeysToItems<int, {{ parent.Name }}>(query, new { {{ col.Name | UpperCamel | Plural }} = {{ col.Name | LowerCamel | Plural }} }, i => i.{{ col.Name | UpperCamel | Singular }}, cancellationToken);",
    "\t\t}",
    "",
    "{%- endif -%}{%- endfor -%}",
    "{% endif -%}{%- endfor %}",
    "\t\tprivate async Task<IReadOnlyDictionary<TIn, IEnumerable<TOut>>> QueryKeysToLists<TIn, TOut>(string query, object param, Func<TOut, TIn> groupBy, CancellationToken cancellationToken)",
    "\t\t{",
    "\t\t\tvar items = (await QueryAsync<TOut>(query, param, cancellationToken)).ToArray();",
    "\t\t\treturn items",
    "\t\t\t.GroupBy(groupBy)",
    "\t\t\t.ToDictionary(g => g.Key, g => (IEnumerable<TOut>) g.ToArray());",
    "\t\t}",
    "",
    "\t\tprivate async Task<IReadOnlyDictionary<TIn, TOut>> QueryKeysToItems<TIn, TOut>(string query, object param, Func<TOut, TIn> keySelector, CancellationToken cancellationToken)",
    "\t\t{",
    "\t\t\tvar items = (await QueryAsync<TOut>(query, param, cancellationToken)).ToArray();",
    "\t\t\treturn items",
    "\t\t\t\t.ToDictionary(keySelector, i => i);",
    "\t\t}",
    "",
    "\t\tprivate async Task<IEnumerable<T>> QueryAsync<T>(string query, object param, CancellationToken cancellationToken)",
    "\t\t{",
    "\t\t\tawait using var connection = _connectionFactory.GetConnection();",
    "\t\t\treturn await connection.QueryAsync<T>(new CommandDefinition(query, param, cancellationToken: cancellationToken));",
    "\t\t}",
    "\t}",
    "}"
  ]
}
 
