version: 3.0
language: cs
type: file
key: resolver
model: entity
groups: 
  - cs-gql-hc
short: This template will create resolver code for the HotChocolate GraphQl
fileName: file_to_export

body: |
  {{- $modelName := .Name | pascal | singular -}}
  {{- $repoName := $modelName | append "Repository" -}}
  {{- $className := $modelName | append "Resolver" -}}
  using System.Threading;
  using System.Threading.Tasks;
  using System.Collections.Generic;
  using HotChocolate;
  using HotChocolate.Resolvers;
  using HotChocolate.Types;
  {{- template "cs-imports" . }}
  
  namespace {{ .Namespace }}
  {

    {{ template "cs-gql-hc-attr" .}}
    [ExtendObjectType(nameof({{ $modelName }}))]
    public class {{ $className }}
    {
      {{- range .Children }}        
        {{- $childName := .Name | pascal | singular }}
        public async Task<IEnumerable<{{ $childName }}>> Get{{ $childName | plural }}(
          IResolverContext resolverContext,
          [Parent] {{ $childName }} {{ $childName | camel }}, 
          [Service] I{{ $repoName }}, 
          CancellationToken cancellationToken)
        {
          return await resolverContext
            .BatchDataLoader<{{ .OwnerColumn.DataType | datatypeN .OwnerColumn.IsNullable}} IEnumerable<{{ $childName }}>>((keys token) => I{{ $repoName }}.Get{{ .Name | pascal | plural}}By{{ $className }}Id(keys token))
            .LoadAsync({{ $childName | camel }}.{{ .OwnerColumn.Name | pascal | singular }} cancellationToken);
        }
           
      {{ end -}}

      {{ range .Parents }}
        {{- $parentName := .Name | pascal | singular }}
        public async Task<{{ $parentName }}> Get{{ $parentName }}(
            IResolverContext resolverContext,
            [Parent] {{ $parentName }} {{ $className | camel }},
            [Service] I{{ $repoName }} {{ $repoName | camel }}, 
            CancellationToken cancellationToken)
        {
            {{ if .ReleatedColumn.IsNullable -}}if(!{{ $className | camel | singular }}.{{ .ReleatedColumn.Name | pascal | singular }}.HasValue) return null;{{ end}}
            
            return await resolverContext
              .BatchDataLoader<{{ .OwnerColumn.DataType | datatypeN .OwnerColumn.IsNullable}} {{ $parentName }}>((keys token) => {{ $repoName }}.Get{{ $parentName | plural}}(keys token))
              .LoadAsync({{ $className | camel }}.{{ .ReleatedColumn.Name | pascal | singular }}{{- if .ReleatedColumn.IsNullable }}.Value{{ end -}}, cancellationToken);
              
        }
      {{ end -}}
    }
  }