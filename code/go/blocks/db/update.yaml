version: 3
language: go
name: go-blocks-db-create
type: block
short: Entity body for getting one and only one item from database. Must be inside func and expects a db obj
key: model
model: entity
body: |    
  {{$model := .Name | camel | singular }}
  reqId, _ := ctx.Value("request_id").(string)
  logger := slog.With("process", "{{ .Name | camel | singular }}Repository.Update", "request_id", reqId)

  conn, err := r.conn.Get(ctx)
  if err != nil {
    return errors.Wrap(err, "{{ .Name | camel | singular }}Repository.Update: get conn")
  }
  defer conn.Close()

  tx, err := conn.BeginTx(ctx, nil)
  if err != nil {
    return errors.Wrap(err, "{{ .Name | camel | singular }}Repository.Update: begin tx")
  }
  var isSuccess bool
  defer func() {
    if isSuccess {
      return
    }
    err = tx.Rollback()
    if err != nil {
      logger.Error("action", "rollback", "error", err)    
      
    }
  }()

  query := `{{ template "sql-update-item" . -}}`

  var outId int

  err = tx.QueryRowContext(
    ctx,
    query,
    {{ range .PrimaryKeys -}}
    sql.Named("{{ .Name }}", {{ .Name | camel }}),
    {{ end }}
    {{ range .NonPrimaryColumns -}}
    sql.Named("{{ .Name }}", {{ $model }}.{{ .Name | pascal }}),
    {{ end }}    
  ).Scan(&outId)

  if err != nil {
    return errors.Wrap(err, "{{ .Name | camel | singular }}Repository.Update: scan row")
  }

  isSuccess = true
  err = tx.Commit()
  if err != nil {
    logger.Error("action", "commit", "error", err)    

  }

  return nil
