version: 3
name: go-hex-controller
language: go
type: file
fileName: "{{ .Name | kebab }}-controller.go"
key: model
model: entity
features:
  - go-rest
  - go-rest-repo
  - go-rest-cqrs 

body: |  
  
  package controllers

  import (
    "github.com/gin-gonic/gin"
    "github.com/pkg/errors"
    "net/http"
    "stages_user_api/core"
    "stages_user_api/core/query"
    "stages_user_api/ports/api/http/controllers/utils"
  )

  func NewWorkoutController(app *core.Application) *WorkoutController {
    return &WorkoutController{app: app}
  }

  type WorkoutController struct {
    app *core.Application
  }

  func (controller *{{ .Name | singular | pascal }}Controller) Update(c *gin.Context)  {
    {{ template "go-rest-blocks-get" . }}
  }

  
  {{ template "go-rest-blocks-post" . }}

  {{ template "go-rest-blocks-delete" . }}

  {{ template "go-rest-blocks-update" . }}

  {{ template "go-rest-blocks-get-list" . }}

  {{ template "go-rest-blocks-get-paged" . }}

  {{ range .Children -}}    
    // @Summary Get detailed information on a workout
    // @Tags {{ .OwnerName | singular | pascal }}
    // @Produce json
    // @Security BearerAuth
    // @Success 200 {object} []models.{{ .Name | singular | pascal }} "Returns a list of {{ .NameWithoutPrefix | pascal | plural }} for the user within the specified parameters"
    // @Failure 400 {object} object{error=string} "The request contained invalid data"
    // @Failure 401 {object} object{error=string} "The authorization header is missing or invalid"
    // @Failure 403 {object} object{error=string} "Attempted to access a workout that does not belong to the authenticated user"
    // @Router /{{ .OwnerName | plural | camel }}/{id}/{{ .NameWithoutPrefix | plural | camel  }} [get]
    // @Param id path int true "The {{ .OwnerName | singular | words }} id"
    func (controller *{{ .OwnerName | singular | pascal }}Controller) Get{{ .NameWithoutPrefix | pascal | plural }}(c *gin.Context)  {
      id, err := strconv.Atoi(c.Param("id"))

      if err != nil {
        c.JSON(http.StatusBadRequest, err)
        return
      }

      items, err := controller.app.{{ .OwnerName | singular | pascal}}Repository.Get{{ .NameWithoutPrefix | pascal | plural }}(c.Request.Context(), id)

      if err != nil {
        _ = c.Error(err)
        return
      }
      
      c.JSON(http.StatusOK, items)
    }
    
  {{ end -}}