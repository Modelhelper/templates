version: 3
language: go
type: snippet
key: model
model: entity

body: |  
  
  {{ range .Children -}}    
    // @Summary Get detailed information on a workout
    // @Tags {{ .OwnerName | singular | pascal }}
    // @Produce json
    // @Security BearerAuth
    // @Success 200 {object} []models.{{ .Name | singular | pascal }} "Returns a list of {{ .NameWithoutPrefix | pascal | plural }} for the user within the specified parameters"
    // @Failure 400 {object} object{error=string} "The request contained invalid data"
    // @Failure 401 {object} object{error=string} "The authorization header is missing or invalid"
    // @Failure 403 {object} object{error=string} "Attempted to access a workout that does not belong to the authenticated user"
    // @Failure 404 {object} object{error=string} "{{ .Name | singular | pascal }} could not be found"
    // @Router /{{ .OwnerName | plural | camel }}/{id}/{{ .NameWithoutPrefix | plural | camel  }} [get]
    // @Param id path int true "The {{ .OwnerName | singular | words }} id"
    func (controller *{{ .OwnerName | singular | pascal }}Controller) Get{{ .NameWithoutPrefix | pascal | plural }}(c *gin.Context)  {
      id, err := strconv.Atoi(c.Param("id"))

      if err != nil {
        c.JSON(http.StatusBadRequest, err)
        return
      }

      items, err := controller.app.{{ .OwnerName | singular | pascal}}Repository.Get{{ .NameWithoutPrefix | pascal | plural }}(c.Request.Context(), id)

      if err != nil {
        _ = c.Error(err)
        return
      }
      
      c.JSON(http.StatusOK, items)
    }
    
  {{ end -}}
