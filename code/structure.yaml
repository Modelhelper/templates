
# mandatory, this is the template version
version: 3.0 

# mandatory, the name is used to identify the template
name: name-of-template

# mandatory field. connects with correct language definition
language: cs 

# mandatory, default: file 
# A file will be able to be exported as a file
# A snippet can be used to inject code at the correct identifier
# A block is a set of common code that can be used in a snippet or a file
type: file | snippet | block

# optional
description: |
    Long description if needed. Will show when 'mh template <template-name>'

# optional
short: This should be short and to the point

# optional, default is null
tags: 
 - tag1
 - tag2
 - tag3 

# what feature this template is included in
# is used to fetch templates within a feature when using --feature in the 'code generate' command
# optional, default is null
features: 
 - feat1
 - feat_2
 - feature-3

# optional, default is none
# This decides which model that will be used to populate the template
model: table # values entity | database | project | options | template | none | graphql | json

# optional, settings here will only be used if --export or --export-file has been used as option argument in the cli
export:

  # if snippet is used, this will be the filename to inject the snippets to
  # optional 
  fileName: filename to be used in the export

  # optional. A key cannot contain . (dot)
  identifier: the key to be used to find correct path

# mandatory, the body of the template
body: |
    This is the template body written with golang text/template specification
    the {{ . }} notation corresponds to the import type.

    the . inside a {{ . }} provides the context of the given import

    e.g if the template import entities you can loop through all entities like so:
    the context of . in the range is a list of entities
        {{ range . }}
            inside the loop, the context of . is each entity
            {{ .Schema }} // the schema of the current entity
            {{ .Name }} // entity name
            {{ .RowCount }}
            {{ .Type }} // table | view | stored procedure | function...
            {{ .Created }} // date for creation
        {{ end }} // end of loop