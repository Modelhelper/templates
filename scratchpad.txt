"\t\tpublic async Task<HistologyMagnitudeType> CreateFields(HistologyMagnitudeType item, List<string> fields)",
"\t\t{",
"\t\t\tusing (var connection =  _connection.CreateForPatoLab())",
"\t\t\t{",
"",
"\t\t\t\tvar sqlColumnBuilder = new StringBuilder();",
"\t\t\t\tvar sqlValuebuilder = new StringBuilder();",
"",
"\t\t\t\t// sqlColumnBuilder.AppendLine(\"create [dbo].[OrderHistology] (\");",
"\t\t\t\t// sqlColumnBuilder.AppendLine(\"create [dbo].[OrderHistology] (\");",
"",
"\t\t\t\tfor (int i = 0; i < fields.Count(); i++)",
"\t\t\t\t{",
"\t\t\t\t\tvar comma = i == 0 ? \"\" : \",\";",
"\t\t\t\t\tvar field = fields.ElementAt(i);",
"",
"\t\t\t\t\tvar colName = $\"{comma} {field}\";",
"\t\t\t\t\tvar valName = $\"{comma} @{field}\";",
"\t\t\t\t\t//var sqlCol = $\"{comma} {field} = @{field}\";",
"",
"\t\t\t\t\tsqlColumnBuilder.AppendLine(field);",
"\t\t\t\t\tsqlValuebuilder.AppendLine(field);",
"\t\t\t\t}",
"",
"\t\t\t\tvar sql = $@\"",
"\t\t\t\t\tinsert into dbo.HistologyMagnitudeType (",
"\t\t\t\t\t\t{sqlColumnBuilder.ToString()}",
"\t\t\t\t\t) values (",
"\t\t\t\t\t\t{sqlValuebuilder.ToString()}",
"\t\t\t\t\t);",
"\t\t\t\t\t",
"\t\t\t\t\tdeclare @itemId int = SCOPE_IDENTITY();",
"\t\t\t\t\tselect @itemId;",
"\t\t\t\t\t\";\t\t\t\t",
"",
"\t\t\t\ttry",
"\t\t\t\t{",
"",
"\t\t\t\t\tvar result = await connection.ExecuteScalarAsync<int> (sqlColumnBuilder.ToString(), new",
"\t\t\t\t\t{",
"\t\t\t\t\t\titem.HistologyMagnitudeTypeName,",
"\t\t\t\t\t\titem.Magnitude,",
"\t\t\t\t\t\titem.IsActive,",
"\t\t\t\t\t\titem.Sort",
"\t\t\t\t\t});",
"\t\t\t\t\tif (result > 0)",
"\t\t\t\t\t{",
"\t\t\t\t\t\tvar entity = await this.Get(result, null);",
"\t\t\t\t\t\treturn entity;",
"\t\t\t\t\t}",
"\t\t\t\t\telse",
"\t\t\t\t\t{",
"\t\t\t\t\t\treturn null;",
"\t\t\t\t\t}",
"\t\t\t\t}",
"\t\t\t\tcatch (Exception exception)",
"\t\t\t\t{",
"\t\t\t\t\tSystem.Diagnostics.Debug.Print(exception.Message);",
"\t\t\t\t\tthrow;",
"\t\t\t\t}",
"\t\t\t}",
"\t\t}",