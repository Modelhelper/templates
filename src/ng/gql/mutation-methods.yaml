Version: 3
Description: ''
Groups: []
Tags: [ng, angular, gql, graphql]
Body: "{%capture outputFields %}# output fields  {%- for column in model.Table.Columns %}\r\n					{{ column.ContextualName | LowerCamel }}{%if forloop.last == false %}, {%endif%}{%endfor%}{%endcapture%}\r\n{%capture inputVariableName %}{{ model.Table.Name | LowerCamel | Singular }}{% endcapture %}\r\n{%capture mutationItemName %}{{ model.Table.Name | UpperCamel | Singular }}Input{% endcapture %}\r\n//#region GraphQL API methods for {{ model.Table.Name | Singular }}\r\ncreate{{ model.Table.Name | Singular }}(item: {{ mutationItemName }}) { \r\nconst qry = gql`\r\n	mutation create($item: {{ mutationItemName }}!) {\r\n		histology {\r\n			{{ model.Table.Name | LowerCamel | Plural }} {\r\n				create(item: $item) {\r\n					{{ outputFields }}\r\n				}\r\n			}\r\n		}\r\n	}`;\r\n\r\nreturn this.apollo.mutate<any>({\r\nmutation: qry,\r\nvariables: {\r\nitem\r\n      }\r\n});\r\n}\r\n{%capture ids %}{%for pk in model.Table.PrimaryKeys %}${{ pk.ContextualName | LowerCamel | Singular }}: {{ pk.DataType | Graphql }}!{%if forloop.last == false %}, {%endif%}{% endfor %}{% endcapture %}\r\nupdate{{ model.Table.Name | Singular }}({%for pk in model.Table.PrimaryKeys %}{{ pk.ContextualName | LowerCamel | Singular }}: {{ pk.DataType | TypeScript }}{%if forloop.last == false %}, {%endif%}{% endfor %}, item: {{ mutationItemName }}) { \r\n	const qry = gql`\r\n	mutation update({{ids}}, $item: {{ mutationItemName }}!) {\r\n		histology {\r\n			{{ model.Table.Name | LowerCamel | Plural }} {\r\n				update({%for pk in model.Table.PrimaryKeys %}{{ pk.ContextualName | LowerCamel | Singular }}: ${{ pk.ContextualName | LowerCamel | Singular }}{%if forloop.last == false %}, {%endif%}{% endfor %}, item: $item) {\r\n					{{ outputFields }}\r\n				}\r\n			}\r\n		}\r\n	}`;\r\n\r\n	return this.apollo.mutate<any>({\r\n		mutation: qry,\r\n		variables: {\r\n{%for pk in model.Table.PrimaryKeys %}			{{ pk.ContextualName | LowerCamel | Singular }}, \r\n{% endfor -%}\r\n			item\r\n		}\r\n		});\r\n}\r\n\r\ndelete{{ model.Table.Name | Singular }}({%for pk in model.Table.PrimaryKeys %}{{ pk.ContextualName | LowerCamel | Singular }}: {{ pk.DataType | TypeScript }}{%if forloop.last == false %}, {%endif%}{% endfor %}) { \r\n	const qry = gql`\r\n	mutation delete({{ids}}) {\r\n		histology {\r\n			{{ model.Table.Name | LowerCamel | Plural }} {\r\n				delete({%for pk in model.Table.PrimaryKeys %}{{ pk.ContextualName | LowerCamel | Singular }}: ${{ pk.ContextualName | LowerCamel | Singular }}{% endfor %})\r\n					id result deleted\r\n				}\r\n			}\r\n		}\r\n	}`;\r\n\r\n	return this.apollo.mutate<any>({\r\n		mutation: qry,\r\n		variables: {\r\n{%for pk in model.Table.PrimaryKeys %}			{{ pk.ContextualName | LowerCamel | Singular }} \r\n{% endfor -%}\r\n		}\r\n		});\r\n}\r\n//#endregion\r\n"
