ExportKey: ng.table-component
Version: 3
CanExport: true
ExportFileName: '{{model.Table.Name | KebabCase | Singular}}-table.component.ts'
Groups: [ng-spa, ng-ui, ng-table]
Tags: []
Body: "{%- capture kebabName %}{{ model.Table.Name | KebabCase | Singular }}{% endcapture -%}\r\n{%- capture className %}{{ model.Table.Name | UpperCamel | Singular }}{% endcapture -%}\r\n{%- capture propertyName %}{{ model.Table.Name | KebabCase | Singular  }}{% endcapture -%}\r\nimport { Component, OnInit, Input, ViewChild, AfterViewInit, OnChanges, Output, EventEmitter } from '@angular/core';\r\nimport { MatSort, MatTableDataSource, MatPaginator } from '@angular/material';\r\n\r\n@Component({\r\n	selector: 'app-{{ propertyName }}-table',\r\n	templateUrl: './{{ kebabName }}-table.component.html',\r\n	styles: []\r\n})\r\nexport class {{ className }}TableComponent implements OnInit, AfterViewInit, OnChanges {\r\n\r\n 	dataSource = new MatTableDataSource<any>([]);\r\n\r\n	@Input() displayedColumns: string[] = [\r\n	{% for prop in model.Table.Columns -%}\r\n		'{{ prop.Name | LowerCamel | Singular }}'{% if forloop.last == false %}, {% endif %}\r\n	{%- endfor -%}\r\n{%- if model.Table.IncludeParentRelations -%}\r\n{%- for relation in model.Table.ParentRelations-%}		\r\n{%- for relatedColumn in relation.ViewModelColumns-%}\r\n		, '{{ relatedColumn.PropertyName | LowerCamel | Singular}}'	\r\n{%- endfor -%}	\r\n{%- endfor -%}	\r\n{%- endif -%}\r\n	];\r\n\r\n	@Input() data: any[] = [];\r\n	@Input() filter: '';\r\n	@Input() enableSort: Boolean = true;\r\n	@Input() enablePaging: Boolean = true;\r\n	@Input() showActionButton: Boolean = true;\r\n	@Input() enableDeleteButton = true;\r\n	@Input() enableEditButton = true;\r\n	// @Input() enableFavoriteButton = false;\r\n\r\n	@Output() onSelect: EventEmitter<any> = new EventEmitter();\r\n	@Output() onDelete: EventEmitter<any> = new EventEmitter();\r\n	@Output() onEdit: EventEmitter<any> = new EventEmitter();\r\n	@Output() onClick: EventEmitter<any> = new EventEmitter();\r\n	@Output() onRowClick: EventEmitter<any> = new EventEmitter();\r\n	@Output() onCreate: EventEmitter<any> = new EventEmitter();\r\n	// @Output() onFavoriteAdd: EventEmitter<any> = new EventEmitter();\r\n	// @Output() onFavoriteRemove: EventEmitter<any> = new EventEmitter();\r\n\r\n	@ViewChild(MatSort) sort: MatSort;\r\n	@ViewChild(MatPaginator) paginator: MatPaginator;\r\n\r\n	constructor() { }\r\n\r\n	handleDelete(item: any) {\r\n		this.onDelete.emit(item);\r\n	}\r\n\r\n\r\n	handleEdit(item: any) {\r\n		this.onEdit.emit(item);\r\n	}\r\n	\r\n  handleClick(item: any) {\r\n    console.log('click the item');\r\n    \r\n    this.onClick.emit(item);\r\n    // \r\n  }\r\n\r\n  handleRowClick(item: any) {\r\n    console.log('click the row');\r\n\r\n    this.onRowClick.emit(item);\r\n    \r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    if (filterValue !== undefined) {\r\n      filterValue = filterValue.trim(); // Remove whitespace\r\n      filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\r\n    }\r\n    \r\n    this.dataSource.filter = filterValue;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n\r\n    this.dataSource.sort = this.enableSort ? this.sort : null;\r\n\r\n    if (this.enablePaging) {\r\n      this.dataSource.paginator = this.paginator;\r\n    }\r\n    \r\n  }\r\n\r\n  ngOnInit() {\r\n    \r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.dataSource.data = this.data;\r\n    \r\n    this.dataSource.sort = this.enableSort ? this.sort : null;\r\n    this.dataSource.paginator = this.enablePaging ? this.paginator : null;    \r\n    this.applyFilter(this.filter);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"
