ExportKey: ng.detail-page
Version: 3
CanExport: true
ExportFileName: '{{model.Table.Name | KebabCase}}-detail.component.ts'
Groups: [ng-spa, ng-ui, ng-detail]
Tags: []
Body: "import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, ErrorHandler } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { FormBuilder, FormGroup, FormControl, FormArray, Validators, FormControlName } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\n\r\nimport { CommonDialogService } from '../../core/services/common-dialog.service';\r\nimport { ToastService } from '../../core/services/toast.service';\r\nimport { ConfirmationResult } from '../../core/confirmation-dialog/confirmation-dialog.component';\r\n{%- capture kebabName %}{{ model.Table.Name | KebabCase | Singular }}{% endcapture -%}\r\n{%- capture className %}{{ model.Table.Name | UpperCamel | Singular }}{% endcapture -%}\r\n{% capture paramName %}{{ model.Table.Name | LowerCamel | Singular  }}{% endcapture %}\r\n@Component({    \r\n	templateUrl: '{{ kebabName }}-detail.component.html',\r\n	styles: [],\r\n	changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class {{ className }}DetailComponent implements OnInit, OnDestroy {\r\n   \r\n	{{ paramName }}: {{ className}};\r\n	\r\n{% for p in model.Table.PrimaryKeys %}\r\n	{{ paramName }}{{ p.Name | UpperCamel | Singular }}: {{ p.DataType | TypeScript }};\r\n{%endfor%}\r\n\r\nrouteSubscription: any;\r\n\r\n// #region Form properties\r\n\r\n	editMode = false;\r\n	isNew = false;\r\n    	editForm: FormGroup;\r\n\r\n	get canSave(): boolean {\r\n		return this.editForm.dirty && this.editForm.valid;\r\n	}\r\n// #endregion\r\n	constructor(\r\n		private formBuilder: FormBuilder,\r\n		private route: ActivatedRoute,\r\n		private router: Router,\r\n		private _toaster: ToastService,\r\n		private location: Location,\r\n		private _commonDialogService: CommonDialogService,\r\n		private _{{ paramName }}Service: {{ className }}Service\r\n	) { }\r\n\r\n    ngOnInit() {\r\n        this.initializeForm();        \r\n\r\n        this.routeSubscription = this.route.params.subscribe(params => {\r\n            {%- for p in model.Table.PrimaryKeys -%}{%capture dataType %}{{ p.DataType | TypeScript }}{% endcapture %}\r\n{%- capture paramSubName -%}{{model.Table.Name | LowerCamel | Singular }}{{ p.Name | UpperCamel | Singular }}{%- endcapture -%}\r\n			this.{{ paramSubName }} = {% if dataType == 'number' %}+{% endif %}params['{{ paramSubName }}'];\r\n{%- endfor -%}\r\n{% capture resourceList %}{% for pk in model.Table.PrimaryKeys %}{% if forloop.first == false %}, {% endif %}this.{{model.Table.Name | LowerCamel | Singular }}{{ pk.Name | UpperCamel | Singular }}{% endfor %}{% endcapture %}\r\n	this.get{{ className }}({{resourceList}});\r\n        });               \r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.routeSubscription.unsubscribe();\r\n    }\r\n    \r\n    get{{ className }}({% primaryKeyList TypeScript %}) {        \r\n        this._{{ paramName }}Service.get{{ className }}({{ resourceList }}).subscribe(\r\n            response => this.on{{ className }}Retrieved(response)\r\n        );\r\n    }\r\n\r\n\r\n\r\n	initializeForm() {\r\n		this.editForm = this.formBuilder.group({\r\n	{%- for item in model.Table.Columns -%}\r\n			{{ item.Name | LowerCamel | Singular }}: [undefined{% if item.IsNullable == false %}, [Validators.required]{% endif %}]{% if forloop.last == false %},{% endif %}\r\n{% endfor -%}            \r\n		});\r\n	}\r\n\r\n	on{{ className }}Retrieved({{ paramName }}: {{ className }}) {\r\n\r\n		if (this.editForm) {\r\n			this.editForm.reset();\r\n		}\r\n        		this.{{ paramName }}= {{ paramName }};\r\n\r\n		this.editForm.patchValue({\r\n{%- for item in model.Table.Columns -%}\r\n			{{ item.Name | LowerCamel | Singular }}: this.{{ paramName }}.{{ item.Name | LowerCamel | Singular }}{% if forloop.last == false %},{% endif %}\r\n{% endfor -%}   	\r\n		});\r\n	}\r\n\r\n\r\n	save() {\r\n\r\n		if (this.canSave) {\r\n			const item: {{ className }} = Object.assign({}, this.{{ paramName }}, this.editForm.value);\r\n           \r\n			if (this.isNew) {\r\n				this.update(item);\r\n			} else {\r\n				this.create(item);\r\n			}\r\n\r\n		}\r\n	}\r\n\r\n	onCancel() {\r\n		if (this.isNew) {\r\n			this.location.back();\r\n		} else {\r\n			this.editMode = false;\r\n		}\r\n\r\n	}\r\n\r\n	update({{ paramName }}: {{ className }}) {        \r\n		this._{{ paramName }}Service.update({{ paramName }}).subscribe(\r\n			response => this.on{{ className }}Retrieved(response)\r\n		);\r\n	}\r\n\r\n	create({{ paramName }}: {{ className }}) {        \r\n		this._{{ paramName }}Service.create({{ paramName }}).subscribe(\r\n			response => this.onCreated(response)\r\n		);\r\n	}\r\n\r\n\r\n	cancel() {\r\n		this.router.navigate(['..'], { relativeTo: this.route });\r\n	}\r\n\r\n	onCreated({{ paramName }}: {{ className }}) {\r\n		this.isNew = false;\r\n		// this.router.navigate(['..', {{ paramName }}.id], { relativeTo: this.route });\r\n	}\r\n\r\n	confirmDelete() {\r\n		const title = `Delete '${this.application.name}'?'`;\r\n		const message = 'This action is permanent and the application cannot be retrived again ';\r\n		this._commonDialogService.confirmDelete(title, message).subscribe(\r\n			dialogResult => this.onDeleteConfirmed(dialogResult)\r\n		);\r\n	}\r\n\r\n	onDeleteConfirmed(dialogResult: ConfirmationResult) {\r\n		if (dialogResult.confirmed) {\r\n			this._{{ paramName }}Service.delete(this.{{ paramName }}.id).subscribe(\r\n				result => this.onDeleted(result),\r\n				error => this.onError(error)\r\n			);\r\n		}\r\n	}\r\n\r\n	onDeleted(result: DeletedResult) {\r\n		if (result.deleted) {\r\n			this.router.navigate(['..'], { relativeTo: this.route });\r\n		}\r\n	}\r\n\r\n	onError(message: any) {\r\n		console.log(JSON.stringify(message));\r\n		this._toaster.toast(JSON.stringify(message));\r\n	}\r\n	// #endregion\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
