{
    "Key": "ts.ng.index-page",
    "Name": "angular-index-page",
    "Description": null,
    "Language": "cs",
    "CanExport": true,
    "ExportFileName": "{{model.Table.Name | KebabCase}}-detail.component.ts",
    "ExportType": "ng.detail-page",
    "TemplateType": 0,
    "Groups": [
        "ng-spa",
        "ng-ui", "ng-detail"
    ],
    "Tags": null,
    "Body": [
        "import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, ErrorHandler } from '@angular/core';",
        "import { ActivatedRoute, Router } from '@angular/router';",
        "import { Subscription } from 'rxjs/Subscription';",
        "import { Observable } from 'rxjs/Observable';",
        "import { FormBuilder, FormGroup, FormControl, FormArray, Validators, FormControlName } from '@angular/forms';",
        "import { Location } from '@angular/common';",
        "",
        "import { CommonDialogService } from '../../core/services/common-dialog.service';",
        "import { ToastService } from '../../core/services/toast.service';",
        "import { ConfirmationResult } from '../../core/confirmation-dialog/confirmation-dialog.component';",
        "{%- capture kebabName %}{{ model.Table.Name | KebabCase | Singular }}{% endcapture -%}",
        "{%- capture className %}{{ model.Table.Name | UpperCamel | Singular }}{% endcapture -%}",
        "{% capture paramName %}{{ model.Table.Name | LowerCamel | Singular  }}{% endcapture %}",
        "@Component({    ",
        "\ttemplateUrl: '{{ kebabName }}-detail.component.html',",
        "\tstyles: [],",
        "\tchangeDetection: ChangeDetectionStrategy.OnPush",
        "})",
        "export class {{ className }}DetailComponent implements OnInit, OnDestroy {",
        "   ",
        "\t{{ paramName }}: {{ className}};",
        "\t",
        "{% for p in model.Table.PrimaryKeys %}",
        "\t{{ paramName }}{{ p.Name | UpperCamel | Singular }}: {{ p.DataType | TypeScript }};",
        "{%endfor%}",
        "",
        "routeSubscription: any;",
        "",
        "// #region Form properties",
        "",
        "\teditMode = false;",
        "\tisNew = false;",
        "    \teditForm: FormGroup;",
        "",
        "\tget canSave(): boolean {",
        "\t\treturn this.editForm.dirty && this.editForm.valid;",
        "\t}",
        "// #endregion",
        "\tconstructor(",
        "\t\tprivate formBuilder: FormBuilder,",
        "\t\tprivate route: ActivatedRoute,",
        "\t\tprivate router: Router,",
        "\t\tprivate _toaster: ToastService,",
        "\t\tprivate location: Location,",
        "\t\tprivate _commonDialogService: CommonDialogService,",
        "\t\tprivate _{{ paramName }}Service: {{ className }}Service",
        "\t) { }",
        "",
        "    ngOnInit() {",
        "        this.initializeForm();        ",
        "",
        "        this.routeSubscription = this.route.params.subscribe(params => {",
        "            {%- for p in model.Table.PrimaryKeys -%}{%capture dataType %}{{ p.DataType | TypeScript }}{% endcapture %}",
        "{%- capture paramSubName -%}{{model.Table.Name | LowerCamel | Singular }}{{ p.Name | UpperCamel | Singular }}{%- endcapture -%}",
        "\t\t\tthis.{{ paramSubName }} = {% if dataType == 'number' %}+{% endif %}params['{{ paramSubName }}'];",
        "{%- endfor -%}",
        "{% capture resourceList %}{% for pk in model.Table.PrimaryKeys %}{% if forloop.first == false %}, {% endif %}this.{{model.Table.Name | LowerCamel | Singular }}{{ pk.Name | UpperCamel | Singular }}{% endfor %}{% endcapture %}",
        "\tthis.get{{ className }}({{resourceList}});",
        "        });               ",
        "    }",
        "",
        "    ngOnDestroy() {",
        "        this.routeSubscription.unsubscribe();",
        "    }",
        "    ",
        "    get{{ className }}({% primaryKeyList TypeScript %}) {        ",
        "        this._{{ paramName }}Service.get{{ className }}({{ resourceList }}).subscribe(",
        "            response => this.on{{ className }}Retrieved(response)",
        "        );",
        "    }",
        "",
        "",
        "",
        "\tinitializeForm() {",
        "\t\tthis.editForm = this.formBuilder.group({",
        "\t{%- for item in model.Table.Columns -%}",
        "\t\t\t{{ item.Name | LowerCamel | Singular }}: [undefined{% if item.IsNullable == false %}, [Validators.required]{% endif %}]{% if forloop.last == false %},{% endif %}",
        "{% endfor -%}            ",
        "\t\t});",
        "\t}",
        "",
        "\ton{{ className }}Retrieved({{ paramName }}: {{ className }}) {",
        "",
        "\t\tif (this.editForm) {",
        "\t\t\tthis.editForm.reset();",
        "\t\t}",
        "        \t\tthis.{{ paramName }}= {{ paramName }};",
        "",
        "\t\tthis.editForm.patchValue({",
        "{%- for item in model.Table.Columns -%}",
        "\t\t\t{{ item.Name | LowerCamel | Singular }}: this.{{ paramName }}.{{ item.Name | LowerCamel | Singular }}{% if forloop.last == false %},{% endif %}",
        "{% endfor -%}   \t",
        "\t\t});",
        "\t}",
        "",
        "",
        "\tsave() {",
        "",
        "\t\tif (this.canSave) {",
        "\t\t\tconst item: {{ className }} = Object.assign({}, this.{{ paramName }}, this.editForm.value);",
        "           ",
        "\t\t\tif (this.isNew) {",
        "\t\t\t\tthis.update(item);",
        "\t\t\t} else {",
        "\t\t\t\tthis.create(item);",
        "\t\t\t}",
        "",
        "\t\t}",
        "\t}",
        "",
        "\tonCancel() {",
        "\t\tif (this.isNew) {",
        "\t\t\tthis.location.back();",
        "\t\t} else {",
        "\t\t\tthis.editMode = false;",
        "\t\t}",
        "",
        "\t}",
        "",
        "\tupdate({{ paramName }}: {{ className }}) {        ",
        "\t\tthis._{{ paramName }}Service.update({{ paramName }}).subscribe(",
        "\t\t\tresponse => this.on{{ className }}Retrieved(response)",
        "\t\t);",
        "\t}",
        "",
        "\tcreate({{ paramName }}: {{ className }}) {        ",
        "\t\tthis._{{ paramName }}Service.create({{ paramName }}).subscribe(",
        "\t\t\tresponse => this.onCreated(response)",
        "\t\t);",
        "\t}",
        "",
        "",
        "\tcancel() {",
        "\t\tthis.router.navigate(['..'], { relativeTo: this.route });",
        "\t}",
        "",
        "\tonCreated({{ paramName }}: {{ className }}) {",
        "\t\tthis.isNew = false;",
        "\t\t// this.router.navigate(['..', {{ paramName }}.id], { relativeTo: this.route });",
        "\t}",
        "",
        "\tconfirmDelete() {",
        "\t\tconst title = `Delete '${this.application.name}'?'`;",
        "\t\tconst message = 'This action is permanent and the application cannot be retrived again ';",
        "\t\tthis._commonDialogService.confirmDelete(title, message).subscribe(",
        "\t\t\tdialogResult => this.onDeleteConfirmed(dialogResult)",
        "\t\t);",
        "\t}",
        "",
        "\tonDeleteConfirmed(dialogResult: ConfirmationResult) {",
        "\t\tif (dialogResult.confirmed) {",
        "\t\t\tthis._{{ paramName }}Service.delete(this.{{ paramName }}.id).subscribe(",
        "\t\t\t\tresult => this.onDeleted(result),",
        "\t\t\t\terror => this.onError(error)",
        "\t\t\t);",
        "\t\t}",
        "\t}",
        "",
        "\tonDeleted(result: DeletedResult) {",
        "\t\tif (result.deleted) {",
        "\t\t\tthis.router.navigate(['..'], { relativeTo: this.route });",
        "\t\t}",
        "\t}",
        "",
        "\tonError(message: any) {",
        "\t\tconsole.log(JSON.stringify(message));",
        "\t\tthis._toaster.toast(JSON.stringify(message));",
        "\t}",
        "\t// #endregion",
        "",
        "}",
        "",
        "",
        "",
        "",
        "",
        ""
    ]
}