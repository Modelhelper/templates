{
    "Key": "60bd6c54-4da8-4140-86ed-20e522ce9dbb",
    "Name": "repositotory-class-full",
    "Description": null,
    "Language": "cs",
    "CanExport": true,
    "ExportFileName": "{{model.Table.Name | UpperCamel | Singular}}Repository.cs",
    "ExportType": "api.repositories",
    "TemplateType": 0,
    "Groups": [
        "CoreWebApi", "CoreWebApiFull", "cs-gql-complete"
    ],
    "Tags": null,
    "Body": [
        "{%- capture queryOption -%}{{ model.QueryOptions.ClassName }} queryOption{% endcapture %}",
        "{%- capture appUserId -%}{{ model.QueryOptions.UserIdProperty }}{% endcapture %}",
        "using System;",
        "using System.Collections.Generic;",
        "using Microsoft.Data.SqlClient;",
        "using System.Threading.Tasks;",
        "using Dapper;",
        "{%- if model.UseQueryOptions -%}using {{model.QueryOptions.Namespace}};{%- endif -%}",
        "{%- if model.InjectUserContext -%}using {{model.QueryOptions.Namespace}};{%- endif -%}",
        "{%- if model.IncludeParents == true -%}using {{model.Namespaces[\"api.view-models\"]}};{%- endif %}",
        "using {{model.Namespaces[\"api.models\"]}};",
        "using {{model.Namespaces[\"api.interfaces\"]}};",
        "namespace {{model.Namespaces[\"api.repositories\"]}}",
        "{ ",
        "{%- capture className %}{{model.Table.Name | UpperCamel | Singular}}{% endcapture %}",
        "{%- capture viewModelClassName -%}{%- if model.IncludeParents == true -%}{{ className }}ViewModel{%- else -%}{{ className }}{%- endif -%}{%- endcapture -%}",
        "\tpublic partial class {{ className }}Repository : I{{ className }}Repository",
        "\t{",
        "\tprivate readonly {{model.ConnectionInterface}} _{{model.ConnectionVariable}};",
        "\t{% if model.InjectUserContext %}private readonly IUserContext _userContext;{% endif -%}",
        "",
        "\tpublic {{ className }}Repository({{model.ConnectionInterface}} {{model.ConnectionVariable}}{% if model.InjectUserContext %}, IUserContext userContext{% endif %})",
        "\t{",
        "\t\t_{{model.ConnectionVariable}} = {{model.ConnectionVariable}};",
        "\t\t_userContext = userContext;",
        "\t}",
        "",
        "public async Task<{{ className }}> Get({% primaryKeyList cs %}{% if model.UseQueryOptions %}, {{ queryOption }}{% endif %})",
        "{",
        "\tusing (var connection =  _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})",
        "\t{",
        "\t\tvar sql = @\"",
        "{% sqlSelectSingle %}",
        "{%- if model.Table.UsesDeletedColumn %}AND {{model.Table.Alias}}.{{model.Table.DeletedColumnName}} = 1{% endif %}\";",
        "\t\tvar item = await connection.QueryFirstOrDefaultAsync<{{ className }}>(sql, new { {% primaryKeyList %} });",
        "\t\treturn item;",
        "\t}",
        "}",
        "",
        "",
        "public async Task<IEnumerable<{{ viewModelClassName }}>> Get({% if model.UseQueryOptions %}{{ queryOption }}{% endif %})",
        "{",
        "\tusing (var connection  =  _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})",
        "\t{",
        "\t\tvar sql = @\"",
        "{% sqlSelectAll %}",
        "{%- if model.Table.UsesDeletedColumn %}WHERE {{model.Table.Alias}}.{{model.Table.DeletedColumnName}} = 1{% endif %}\";",
        "\t\tvar items = await connection.QueryAsync<{{ viewModelClassName }}>(sql);",
        "\t\treturn items;",
        "\t}",
        "}",
        "",
        "",
        "public async Task<{{ className }}> Create({{ className }} item{% if model.UseQueryOptions %}, {{ queryOption }}{% endif %})",
        "{",
        "\tif (item == null)",
        "\t{",
        "\t\tthrow new ArgumentNullException();",
        "\t}",
        "\t{% if model.Table.UsesGuidAsPrimaryKey %}{% for pk in model.Table.PrimaryKeys %}if (item.{{pk.Name}} == Guid.Empty)",
        "\t{",
        "\t\titem.{{pk.Name}} = Guid.NewGuid();",
        "\t}{% endfor %}{% endif %}",
        "",
        "\tusing (var connection =  _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})",
        "\t{",
        "\t\tvar sql = @\"",
        "{% sqlInsert %};",
        "{% if model.Table.UsesIdentityColumn %}\tdeclare @itemId int = SCOPE_IDENTITY();",
        "\tselect @itemId;{% endif %}",
        "\";",
        "\t\ttry",
        "\t\t{",
        "{% if model.Table.UsesIdentityColumn %}",
        "\t\t\tvar sqlCreateId = await connection.ExecuteScalarAsync<int>(sql, new { {% propertyList %}{% if model.UseQueryOptions %}, ApplicationUserId = queryOption.{{appUserId}}{% endif %} });",
        "\t\t\tif (sqlCreateId > 0)",
        "\t\t\t{",
        "\t\t\t\tvar entity = await this.Get(sqlCreateId{% if model.UseQueryOptions %}, queryOption{% endif %});",
        "\t\t\t\treturn entity;",
        "\t\t\t}",
        "\t\t\telse",
        "\t\t\t{",
        "\t\t\t\treturn null;",
        "\t\t\t}",
        "{% else %}",
        "\t\t\tvar sqlCreateResult = await connection.ExecuteAsync(sql, new { {% propertyList %}{% if model.UseQueryOptions %}, ApplicationUserId = queryOption.{{appUserId}}{% endif %} });",
        "\t\t\tif (sqlCreateResult > 0)",
        "\t\t\t{",
        "{% capture itemKeys %}{% for pk in model.Table.PrimaryKeys %}{% if forloop.first == false %}, {% endif %}item.{{ pk.PropertyName }}{% endfor %}{% endcapture %}",
        "\t\t\t\tvar entity = await this.Get({{itemKeys}}{% if model.UseQueryOptions %}, queryOption{% endif %});",
        "\t\t\t\treturn entity;",
        "\t\t\t}",
        "\t\t\telse",
        "\t\t\t{",
        "\t\t\t\treturn null;",
        "\t\t\t}",
        "{% endif %}",
        "\t\t}",
        "\t\tcatch(Exception exception)",
        "\t\t{",
        "\t\t\tSystem.Diagnostics.Debug.Print(exception.Message);",
        "\t\t\tthrow;",
        "\t\t}",
        "\t}",
        "}",
        "",
        "",
        "public async Task<{{ className }}> Update({% primaryKeyList cs %}, {{ className }} item{% if model.UseQueryOptions %}, {{ queryOption }}{% endif %})",
        "{",
        "\tif (item == null)",
        "\t{",
        "\t\tthrow new ArgumentNullException();",
        "\t}",
        "",
        "",
        "\tusing (var connection =  _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})",
        "\t{",
        "\t\tvar sql = @\"",
        "{% sqlUpdate %}",
        "\";",
        "\t\ttry",
        "\t\t{",
        "\t\t\tvar result = await connection.ExecuteAsync(sql, new { ",
        "{% propertyList %}{% if model.UseQueryOptions %}, ApplicationUserId = queryOption.{{appUserId}}{% endif %}",
        "});",
        "\t\t\tif (result > 0)",
        "\t\t\t{",
        "\t\t\t\tvar entity = await this.Get({% primaryKeyList %}{% if model.UseQueryOptions %}, queryOption{% endif %});",
        "\t\t\t\treturn entity;",
        "\t\t\t}",
        "\t\t\telse",
        "\t\t\t{",
        "\t\t\t\treturn null;",
        "\t\t\t}",
        "\t\t}",
        "\t\tcatch(Exception exception)",
        "\t\t{",
        "\t\t\tSystem.Diagnostics.Debug.Print(exception.Message);",
        "\t\t\tthrow;",
        "\t\t}",
        "\t}",
        "}",
        "",
        "",
        "public async Task<bool> Delete({% primaryKeyList cs %}{% if model.UseQueryOptions %}, {{ queryOption }}{% endif %})",
        "{",
        "\tusing (var connection =  _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})",
        "\t{",
        "\t\tvar sql = @\"{% sqlDelete %};\";",
        "\t\ttry",
        "\t\t{",
        "\t\t\tvar result = await connection.ExecuteAsync(sql, new { {% primaryKeyList %} });",
        "\t\t\treturn result > 0;",
        "\t\t}",
        "\t\tcatch(Exception exception)",
        "\t\t{",
        "\t\t\tSystem.Diagnostics.Debug.Print(exception.Message);",
        "\t\t\tthrow;",
        "\t\t}",
        "\t}",
        "}",
        "",
        "",
        "{% if model.IncludeParents == true %}",
        "{%- for parent in model.Table.ParentRelations -%}{% if parent.GroupIndex == 1 %}",
        "\tpublic async Task<IEnumerable<{{className}}ViewModel>> Get{{parent.Name | UpperCamel | Singular}}{{model.Table.Name | UpperCamel | Plural}}({{ parent.ChildColumnType | CSharp}} {{ parent.ChildColumnName | LowerCamel | Singular}}{% if model.UseQueryOptions %}, {{ queryOption }}{% endif %})",
        "\t{",
        "\tusing (var connection  =  _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})",
        "\t{",
        "\t\tvar sql = @\"",
        "{% sqlSelectAll %}",
        "Where {{parent.ChildColumnName}} = @{{ parent.ChildColumnName | LowerCamel | Singular}}",
        "{% if model.Table.UsesDeletedColumn %}AND {{model.Table.Alias}}.{{model.Table.DeletedColumnName}} != 1{% endif %}\";",
        "\t\tvar items = await connection.QueryAsync<{{ className }}ViewModel>(sql, new { ",
        "\t\t\t{{ parent.ChildColumnName | LowerCamel | Singular }}",
        "\t\t});",
        "\t\treturn items;",
        "\t}",
        "\t}",
        "{%- endif %}{%- endfor %}",
        "{%- endif  %}",
        "",
        "//PLACEHOLDER[CHILD_RELATION_SNIPPET]",
        "",
        "\t}",
        "",
        "}",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ]
}