ExportKey: api.repositories
Version: 3
CanExport: true
ExportFileName: '{{model.Table.Name | UpperCamel | Singular}}PartialRepository.cs'
Groups: [GraphQLCore]
Tags: []
Body: "{%- capture queryOption -%}{{ model.QueryOptions.ClassName }} queryOption{% endcapture %}\r\n{%- capture appUserId -%}{{ model.QueryOptions.UserIdProperty }}{% endcapture %}\r\nusing System;\r\nusing System.Linq;\r\nusing System.Collections.Generic;\r\nusing System.Data.SqlClient;\r\nusing System.Threading.Tasks;\r\nusing Dapper;\r\n{%- if model.UseQueryOptions -%}using {{model.QueryOptions.Namespace}};{%- endif %}\r\nusing {{model.Namespaces[\"api.models\"]}};\r\nusing {{model.Namespaces[\"api.interfaces\"]}};\r\nnamespace {{model.Namespaces[\"api.repositories\"]}}\r\n{ \r\n{%- capture className %}{{model.Table.Name | UpperCamel | Singular}}{% endcapture %}\r\n{%- capture classPropertyName %}{{model.Table.Name | LowerCamel | Singular}}{% endcapture %}\r\n	public partial class {{ className }}Repository : I{{ className }}Repository\r\n	{\r\n		public async Task<{{ className }}> UpdateFields(int {{ classPropertyName }}Id, {{ className }} item, List<string> fields)\r\n		{\r\n			using (var connection = _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})\r\n			{\r\n\r\n			var sqlBuilder = new StringBuilder();\r\n			sqlBuilder.AppendLine(\"UPDATE [dbo].[{{ className }}] SET\");\r\n\r\n			for (int i = 0; i < fields.Count(); i++)\r\n			{\r\n				var field = fields.ElementAt(i);\r\n				var comma = i == 0 ? \"\" : \",\";\r\n				var sqlCol = $\"{comma} {field} = @{field}\";\r\n\r\n				sqlBuilder.AppendLine(sqlCol);\r\n			}\r\n\r\n			sqlBuilder.AppendLine(\"WHERE [{{ className }}] = @{{ classPropertyName }}Id\");\r\n\r\n			try\r\n			{\r\n\r\n				var result = await connection.ExecuteAsync(sqlBuilder.ToString(), new\r\n				{\r\n						{{ classPropertyName }}Id,{% for column in model.Table.Columns -%}\r\n						{%- if column.IsPrimaryKey == false -%}item.{{ column.Name }},{%- endif %}\r\n{% endfor -%}\r\n				});\r\n					if (result > 0)\r\n					{\r\n						var entity = await this.Get({{ classPropertyName }}Id, null);\r\n						return entity;\r\n					}\r\n					else\r\n					{\r\n						return null;\r\n					}\r\n				}\r\n				catch (Exception exception)\r\n				{\r\n					System.Diagnostics.Debug.Print(exception.Message);\r\n					throw;\r\n				}\r\n			}\r\n		}\r\n\r\n		public async Task<{{ className }}> CreateFields({{ className }} item, List<string> fields)\r\n		{\r\n			using (var connection = _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})\r\n			{\r\n\r\n				var sqlColumnBuilder = new StringBuilder();\r\n				var sqlValuebuilder = new StringBuilder();\r\n\r\n				// sqlColumnBuilder.AppendLine(\"create [dbo].[OrderHistology] (\");\r\n				// sqlColumnBuilder.AppendLine(\"create [dbo].[OrderHistology] (\");\r\n\r\n				for (int i = 0; i < fields.Count(); i++)\r\n				{\r\n					var comma = i == 0 ? \"\" : \",\";\r\n					var field = fields.ElementAt(i);\r\n\r\n					var colName = $\"{comma} {field}\";\r\n					var valName = $\"{comma} @{field}\";\r\n					//var sqlCol = $\"{comma} {field} = @{field}\";\r\n\r\n					sqlColumnBuilder.AppendLine(field);\r\n					sqlValuebuilder.AppendLine(field);\r\n				}\r\n\r\n				var sql = $@\"\r\n					insert into dbo.{{ className }} (\r\n						{sqlColumnBuilder.ToString()}\r\n					) values (\r\n						{sqlValuebuilder.ToString()}\r\n					);\r\n					\r\n					declare @itemId int = SCOPE_IDENTITY();\r\n					select @itemId;\r\n					\";				\r\n\r\n				try\r\n				{\r\n\r\n					var result = await connection.ExecuteScalarAsync<int> (sqlColumnBuilder.ToString(), new\r\n					{ {% for column in model.Table.Columns -%}\r\n						{% if column.IsPrimaryKey == false -%}item.{{ column.Name }},{%- endif %}\r\n{% endfor %}					});\r\n\r\n					if (result > 0)\r\n					{\r\n						var entity = await this.Get(result, null);\r\n						return entity;\r\n					}\r\n					else\r\n					{\r\n						return null;\r\n					}\r\n				}\r\n				catch (Exception exception)\r\n				{\r\n					System.Diagnostics.Debug.Print(exception.Message);\r\n					throw;\r\n				}\r\n			}\r\n		}\r\n	}\r\n\r\n}\r\n\r\n"
