{
    "Key": "60bd6c54-4da8-4140-86ed-20e522ce9dbb",
    "Name": "repositotory-class-full",
    "Description": null,
    "Language": "cs",
    "CanExport": true,
    "ExportFileName": "{{model.Table.Name | UpperCamel | Singular}}PartialRepository.cs",
    "ExportType": "api.repositories",
    "TemplateType": 0,
    "Groups": [
        "GraphQLCore"
    ],
    "Tags": null,
    "Body": [
        "{%- capture queryOption -%}{{ model.QueryOptions.ClassName }} queryOption{% endcapture %}",
        "{%- capture appUserId -%}{{ model.QueryOptions.UserIdProperty }}{% endcapture %}",
        "using System;",
        "using System.Linq;",
        "using System.Collections.Generic;",
        "using System.Data.SqlClient;",
        "using System.Threading.Tasks;",
        "using Dapper;",
        "{%- if model.UseQueryOptions -%}using {{model.QueryOptions.Namespace}};{%- endif %}",
        "using {{model.Namespaces[\"api.models\"]}};",
        "using {{model.Namespaces[\"api.interfaces\"]}};",
        "namespace {{model.Namespaces[\"api.repositories\"]}}",
        "{ ",
        "{%- capture className %}{{model.Table.Name | UpperCamel | Singular}}{% endcapture %}",
        "{%- capture classPropertyName %}{{model.Table.Name | LowerCamel | Singular}}{% endcapture %}",
        "\tpublic partial class {{ className }}Repository : I{{ className }}Repository",
        "\t{",
        "\t\tpublic async Task<{{ className }}> UpdateFields(int {{ classPropertyName }}Id, {{ className }} item, List<string> fields)",
        "\t\t{",
        "\t\t\tusing (var connection = _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})",
        "\t\t\t{",
"",
        "\t\t\tvar sqlBuilder = new StringBuilder();",
        "\t\t\tsqlBuilder.AppendLine(\"UPDATE [dbo].[{{ className }}] SET\");",
"",
        "\t\t\tfor (int i = 0; i < fields.Count(); i++)",
        "\t\t\t{",
        "\t\t\t\tvar field = fields.ElementAt(i);",
        "\t\t\t\tvar comma = i == 0 ? \"\" : \",\";",
        "\t\t\t\tvar sqlCol = $\"{comma} {field} = @{field}\";",
"",
        "\t\t\t\tsqlBuilder.AppendLine(sqlCol);",
        "\t\t\t}",
"",
        "\t\t\tsqlBuilder.AppendLine(\"WHERE [{{ className }}] = @{{ classPropertyName }}Id\");",
"",
        "\t\t\ttry",
        "\t\t\t{",
"",
        "\t\t\t\tvar result = await connection.ExecuteAsync(sqlBuilder.ToString(), new",
        "\t\t\t\t{",
        "\t\t\t\t\t\t{{ classPropertyName }}Id,{% for column in model.Table.Columns -%}",
        "\t\t\t\t\t\t{%- if column.IsPrimaryKey == false -%}item.{{ column.Name }},{%- endif %}",
        "{% endfor -%}",
        "\t\t\t\t});",
        "\t\t\t\t\tif (result > 0)",
        "\t\t\t\t\t{",
        "\t\t\t\t\t\tvar entity = await this.Get({{ classPropertyName }}Id, null);",
        "\t\t\t\t\t\treturn entity;",
        "\t\t\t\t\t}",
        "\t\t\t\t\telse",
        "\t\t\t\t\t{",
        "\t\t\t\t\t\treturn null;",
        "\t\t\t\t\t}",
        "\t\t\t\t}",
        "\t\t\t\tcatch (Exception exception)",
        "\t\t\t\t{",
        "\t\t\t\t\tSystem.Diagnostics.Debug.Print(exception.Message);",
        "\t\t\t\t\tthrow;",
        "\t\t\t\t}",
        "\t\t\t}",
        "\t\t}",
        "",

        "\t\tpublic async Task<{{ className }}> CreateFields({{ className }} item, List<string> fields)",
        "\t\t{",
        "\t\t\tusing (var connection = _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})",
        "\t\t\t{",
        "",
        "\t\t\t\tvar sqlColumnBuilder = new StringBuilder();",
        "\t\t\t\tvar sqlValuebuilder = new StringBuilder();",
        "",
        "\t\t\t\t// sqlColumnBuilder.AppendLine(\"create [dbo].[OrderHistology] (\");",
        "\t\t\t\t// sqlColumnBuilder.AppendLine(\"create [dbo].[OrderHistology] (\");",
        "",
        "\t\t\t\tfor (int i = 0; i < fields.Count(); i++)",
        "\t\t\t\t{",
        "\t\t\t\t\tvar comma = i == 0 ? \"\" : \",\";",
        "\t\t\t\t\tvar field = fields.ElementAt(i);",
        "",
        "\t\t\t\t\tvar colName = $\"{comma} {field}\";",
        "\t\t\t\t\tvar valName = $\"{comma} @{field}\";",
        "\t\t\t\t\t//var sqlCol = $\"{comma} {field} = @{field}\";",
        "",
        "\t\t\t\t\tsqlColumnBuilder.AppendLine(field);",
        "\t\t\t\t\tsqlValuebuilder.AppendLine(field);",
        "\t\t\t\t}",
        "",
        "\t\t\t\tvar sql = $@\"",
        "\t\t\t\t\tinsert into dbo.{{ className }} (",
        "\t\t\t\t\t\t{sqlColumnBuilder.ToString()}",
        "\t\t\t\t\t) values (",
        "\t\t\t\t\t\t{sqlValuebuilder.ToString()}",
        "\t\t\t\t\t);",
        "\t\t\t\t\t",
        "\t\t\t\t\tdeclare @itemId int = SCOPE_IDENTITY();",
        "\t\t\t\t\tselect @itemId;",
        "\t\t\t\t\t\";\t\t\t\t",
        "",
        "\t\t\t\ttry",
        "\t\t\t\t{",
        "",
        "\t\t\t\t\tvar result = await connection.ExecuteScalarAsync<int> (sqlColumnBuilder.ToString(), new",
        "\t\t\t\t\t{ {% for column in model.Table.Columns -%}",
        "\t\t\t\t\t\t{% if column.IsPrimaryKey == false -%}item.{{ column.Name }},{%- endif %}",       
        "{% endfor %}\t\t\t\t\t});",
        "",
        "\t\t\t\t\tif (result > 0)",
        "\t\t\t\t\t{",
        "\t\t\t\t\t\tvar entity = await this.Get(result, null);",
        "\t\t\t\t\t\treturn entity;",
        "\t\t\t\t\t}",
        "\t\t\t\t\telse",
        "\t\t\t\t\t{",
        "\t\t\t\t\t\treturn null;",
        "\t\t\t\t\t}",
        "\t\t\t\t}",
        "\t\t\t\tcatch (Exception exception)",
        "\t\t\t\t{",
        "\t\t\t\t\tSystem.Diagnostics.Debug.Print(exception.Message);",
        "\t\t\t\t\tthrow;",
        "\t\t\t\t}",
        "\t\t\t}",
        "\t\t}",

        "\t}",
        "",
        "}",    
        ""
    ]
}