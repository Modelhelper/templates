ExportKey: api.repositories
Version: 3
CanExport: true
ExportFileName: '{{model.Table.Name | UpperCamel | Singular}}QueryPartialRepository.cs'
Groups: [GraphQLCore, cs-gql-complete]
Tags: []
Body: "{%- capture queryOption -%}{{ model.QueryOptions.ClassName }} queryOption{% endcapture %}\r\n{%- capture appUserId -%}{{ model.QueryOptions.UserIdProperty }}{% endcapture %}\r\nusing System;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Collections.Generic;\r\nusing System.Data.SqlClient;\r\nusing System.Threading.Tasks;\r\nusing System.Threading;\r\nusing Dapper;\r\n{%- if model.UseQueryOptions -%}using {{model.QueryOptions.Namespace}};{%- endif %}\r\nusing {{model.Namespaces[\"api.models\"]}};\r\nusing {{model.Namespaces[\"api.interfaces\"]}};\r\nnamespace {{model.Namespaces[\"api.repositories\"]}}\r\n{ \r\n{%- capture className %}{{model.Table.Name | UpperCamel | Singular}}{% endcapture %}\r\n{%- capture classPropertyName %}{{model.Table.Name | LowerCamel | Singular}}{% endcapture %}\r\n	public partial class {{ className }}Repository : I{{ className }}Repository\r\n	{\r\n{%- for child in model.Table.ChildRelations -%}{%- if child.GroupIndex == 1 -%}\r\n{%- capture childPropertyName %}{{ child.ParentColumnName | LowerCamel | Plural}}{% endcapture -%}\r\n{%- capture childIdName %}{{ child.ParentColumnName | UpperCamel | Singlular}}{% endcapture -%}\r\n		public async Task<ILookup<{{ child.ParentColumnType  | CSharp }}, {{ child.Name | UpperCamel | Singular }}>> Get{{child.ModelName | UpperCamel | Plural}}(IEnumerable<{{ child.ParentColumnType | CSharp}}> {{ child.ParentColumnName | LowerCamel | Plural}})\r\n		{\r\n			using (var connection = _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})\r\n			{\r\n				var sql = @\"\r\n					select * from [{{child.Schema}}].[{{ child.Name | UpperCamel | Singular }}] \r\n					where {{ childIdName }} in @{{ childPropertyName }}\r\n{%- for a in child.Columns %}{%- if a.IsDeletedMarker %}						 and {{ a.Name }} = 1 {% endif -%}{% endfor -%} \r\n;\";\r\n			var items = await connection.QueryAsync<{{ child.Name | UpperCamel | Singular }}>(sql, new { {{childPropertyName}} });\r\n			return items.ToLookup(x => x.{{ childIdName }}{% if child.ChildColumnNullable %}.Value{% endif %});\r\n			}\r\n		}\r\n\r\n\r\n{% endif -%}{%- endfor %}\r\n{%- for item in model.Table.ParentRelations -%}{%- if item.GroupIndex == 1 -%}\r\n{%- capture itemPropertyName %}{{ item.ParentColumnName | LowerCamel | Plural}}{% endcapture -%}\r\n{%- capture itemIdName %}{{ item.ParentColumnName | UpperCamel | Singlular}}{% endcapture -%}\r\n		public async Task<IDictionary<{{ item.ParentColumnType  | CSharp }}, {{ item.Name | UpperCamel | Singular }}>> Get{{item.ModelName | UpperCamel | Singular}}(IEnumerable<{{ item.ParentColumnType | CSharp}}> {{ item.ParentColumnName | LowerCamel | Plural}}, CancellationToken cancellationToken)\r\n		{\r\n			using (var connection = _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})\r\n			{\r\n				var sql = @\"\r\n					select * from [{{item.Schema}}].[{{ item.Name | UpperCamel | Singular }}] \r\n					where {{ itemIdName }} in @{{ itemPropertyName }}\r\n{%- for a in item.Columns %}{%- if a.IsDeletedMarker %}						 and {{ a.Name }} = 1 {% endif -%}{% endfor -%} \r\n;\";\r\n				var items = await connection.QueryAsync<{{ item.Name | UpperCamel | Singular }}>(sql, new { {{itemPropertyName}} });\r\n				return items.ToDictionary(x => x.{{ itemIdName }}{% if item.ParentColumnNullable %}.Value{% endif %}, x => x);\r\n			}\r\n		}\r\n\r\n\r\n{% endif -%}{%- endfor %}\r\n	}\r\n\r\n}\r\n\r\n"
