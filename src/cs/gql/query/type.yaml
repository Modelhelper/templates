ExportKey: gql.types
Version: 3
Description: Creates a <Entity>Type file based on ObjectGraphType for GraphQL
CanExport: true
ExportFileName: '{{model.Table.Name | UpperCamel | Singular}}QueryType.cs'
Groups: [GraphQLCore, cs-gql-complete]
Tags: [GraphQL, Api, Core]
Body: "using System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing GraphQL.Types;\r\nusing GraphQL.DataLoader;\r\nusing {{model.Namespaces[\"api.interfaces\"]}};\r\nusing {{model.Namespaces[\"api.models\"]}};\r\n{% capture repo %}{{ model.Table.Name | LowerCamel | Singular }}Repository{% endcapture %}\r\nnamespace {{model.Namespaces[\"gql.types\"]}}\r\n {\r\n	public class {{model.Table.Name | UpperCamel | Singular}}QueryType : ObjectGraphType<{{model.Table.Name | UpperCamel | Singular}}>\r\n	{\r\n		private readonly I{{ model.Table.Name | UpperCamel | Singular }}Repository _{{repo}};\r\n\r\n		public {{model.Table.Name | UpperCamel | Singular}}QueryType(IDataLoaderContextAccessor accessor, I{{ model.Table.Name | UpperCamel | Singular }}Repository {{ repo }})\r\n		{\r\n			_{{repo}} = {{ repo }};\r\n\r\n			Name = \"{{model.Table.Name | UpperCamel | Singular}}\"; // the entity name => select * from {{ model.Table.Schema }}.[{{ model.Table.Name }}]\r\n			Description = \"{{model.Table.Description}}\";\r\n{%- for property in model.Table.Columns -%}{% capture dataType %}{{ property.DataType | CSharp }}{% endcapture -%}\r\n{%- capture nullable %}{%if property.IsNullable %}, nullable: true{% endif %}{% endcapture -%}\r\n{%- capture description %}{%if property.Description.Length > 0 %}.Description(\"{{property.Description}}\"){% endif %}{% endcapture -%}\r\n{%- capture name %}{%if property.IsIdentity > 0 %}.Name(\"id\"){% endif %}{% endcapture -%}\r\n			{% if property.IsIgnored %}// {% endif %}Field(t => t.{{ property.PropertyName }}{{ nullable }}){{name}}{{description}};\r\n{%- endfor -%}\r\n{%- for child in model.Table.ChildRelations -%}{%- if child.GroupIndex == 1 -%}\r\n			Field<ListGraphType<{{ child.Name | UpperCamel | Singular }}QueryType>, IEnumerable<{{ child.Name | UpperCamel | Singular }}>>()\r\n				.Name(\"{{child.ModelName | LowerCamel | Plural}}\")\r\n				.ResolveAsync(ctx => \r\n				{\r\n					var dataLoader = accessor.Context.GetOrAddCollectionBatchLoader<{{ child.ParentColumnType  | CSharp }}, {{ child.Name | UpperCamel | Singular }}>(\"Get{{child.ModelName | UpperCamel | Plural}}\", {{ repo }}.Get{{child.ModelName | UpperCamel | Plural}});\r\n					return dataLoader.LoadAsync(ctx.Source.{{ child.ParentColumnName | UpperCamel | Singular }});\r\n				});\r\n{% endif -%}{%- endfor %}\r\n\r\n{%- for parent in model.Table.ParentRelations -%}{%- if parent.GroupIndex == 1 -%}\r\n			Field<{{ parent.Name | UpperCamel | Singular }}QueryType, {{ parent.Name | UpperCamel | Singular }}>()\r\n				.Name(\"{{parent.ModelName | LowerCamel | Singular}}\")\r\n				.ResolveAsync(ctx => \r\n				{\r\n					var dataLoader = accessor.Context.GetOrAddBatchLoader<{{ parent.ChildColumnType  | CSharp }}, {{ parent.Name | UpperCamel | Singular }}>(\"Get{{parent.ModelName | UpperCamel | Plural}}\", Get{{parent.ModelName | UpperCamel | Plural}});\r\n					return dataLoader.LoadAsync(ctx.Source.{{ parent.ChildColumnName | UpperCamel | Singular }}{%- if parent.ChildColumnNullable %}.Value{% endif -%});\r\n				});\r\n\r\n{% endif -%}{%- endfor %}\r\n		}\r\n\r\n{%- for parent in model.Table.ParentRelations -%}{%- if parent.GroupIndex == 1 -%}\r\n		public async Task<IDictionary<{{ parent.ChildColumnType  | CSharp }}, {{ parent.Name | UpperCamel | Singular }}>> Get{{parent.ModelName | UpperCamel | Plural}}(IEnumerable<{{ parent.ChildColumnType  | CSharp }}> ids, CancellationToken cancellationToken)\r\n		{\r\n			//throw new System.NotImplementedException();\r\n			return await _{{ repo }}.Get{{parent.ModelName | UpperCamel | Singular}}(ids, cancellationToken);\r\n		}\r\n\r\n{% endif -%}{%- endfor %}\r\n	}\r\n}\r\n"
