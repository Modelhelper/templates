{
    "Key": "cs.core.api.controller",
    "Name": null,
    "Description": null,
    "Language": "cs",
    "CanExport": true,
    "ExportType": "dataReaders",
    "ExportFileName": "{{model.Table.Name | UpperCamel | Plural }}DataReader.cs",
    "TemplateType": 0,
    "Groups": [],
    "Tags": [
      "cs"      
    ],
    "Body": [ 
      "using System;",
      "using System.Collections.Generic;",
      "using Microsoft.Data;",
      "using System.Linq;",      
      "using {{model.Namespaces[\"api.models\"]}};",  
      "",
      "namespace {{model.Namespaces[\"dataReaders\"]}}",
      "{",
      "\tpublic class {{model.Table.Name | UpperCamel | Singular}}DataReader : IDataReader",
      "\t{",
"",
"      private int _currentIndex = 0;",
    "{%- for column in model.Table.Columns -%}{%- capture __count -%}{{forloop.length}}{%- endcapture -%}{% endfor %}",
 
"        public {{model.Table.Name | UpperCamel | Singular}}DataReader(){}",
"",
"        public {{model.Table.Name | UpperCamel | Singular}}DataReader(List<{{model.Table.Name | UpperCamel | Singular}}> dataSource)",
"        {",
"            DataSource = dataSource;",
"        }",
"        public List<{{model.Table.Name | UpperCamel | Singular}}> DataSource { get; set; }",
"",
"",
"        public int FieldCount => {{__count}};",
"",
"        public int GetOrdinal(string name)",
"        {",
"            switch (name)",
"            {",
"            {%- for column in model.Table.Columns -%}",
"                case \"{{ column.Name }}\": return {{ forloop.index0 }};",              
"               {%- endfor -%}",
"                default: return -1;",
"            }",
"        }",
"",
"        public object GetValue(int i)",
"        {",
"            switch (i)",
"            {",
"            {%- for column in model.Table.Columns -%}",
"                case {{forloop.index0}}: return DataSource[_currentIndex].{{ column.PropertyName }};",
"                {%- endfor -%}",
"                default: return null;",
"",
"            }",
"        }",
"",
"",
"        ",
"        public bool Read()",
"        {",
"            if ((_currentIndex + 1) < DataSource.Count)",
"            {",
"                _currentIndex++;",
"                return true;",
"            }",
"            else",
"            {",
"                return false;",
"            }",
"        }",
"",
"        #region Not needed for BulkInsert",
"",
"        public bool NextResult()",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public object this[int i] => throw new NotImplementedException();",
"",
"        public object this[string name] => throw new NotImplementedException();",
"",
"        public int Depth => throw new NotImplementedException();",
"",
"        public bool IsClosed => false; ",
"",
"        public int RecordsAffected => DataSource.Count();",
"",
"        public void Close()",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public bool GetBoolean(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public byte GetByte(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public char GetChar(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public IDataReader GetData(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public string GetDataTypeName(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public DateTime GetDateTime(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public decimal GetDecimal(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public double GetDouble(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public Type GetFieldType(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public float GetFloat(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public Guid GetGuid(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public short GetInt16(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public int GetInt32(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public long GetInt64(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public string GetName(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        ",
"        public DataTable GetSchemaTable()",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public string GetString(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public int GetValues(object[] values)",
"        {",
"            throw new NotImplementedException();",
"        }",
"",
"        public bool IsDBNull(int i)",
"        {",
"            throw new NotImplementedException();",
"        }",
"        #endregion",
"                ",
"",
"        #region IDisposable Support",
"        private bool disposedValue = false; // To detect redundant calls",
"",
"        ",
"        protected virtual void Dispose(bool disposing)",
"        {",
"            if (!disposedValue)",
"            {",
"                if (disposing)",
"                {",
"                    DataSource = null;",
"                }",
"",
"                disposedValue = true;",
"            }",
"        }",
"",
"        // ~TestReader() {",
"        //   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.",
"        //   Dispose(false);",
"        // }",
"",
"        // This code added to correctly implement the disposable pattern.",
"        public void Dispose()",
"        {",
"            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.",
"            Dispose(true);",
"            // TODO: uncomment the following line if the finalizer is overridden above.",
"            // GC.SuppressFinalize(this);",
"        }",
"        #endregion",
      "\t}",
      "}",
      "",
      "",
      ""
    ]
  }