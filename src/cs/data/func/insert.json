{
    "Key": "60bd6c54-4da8-4140-86ed-20e522ce9dbb",
    "Name": "repositotory-class-full",
    "Description": null,
    "Language": "cs",
    "CanExport": false,

    "Body": [
        "{%- capture queryOption -%}{{ model.QueryOptions.ClassName }} queryOption{% endcapture %}",
        "{%- capture appUserId -%}{{ model.QueryOptions.UserIdProperty }}{% endcapture %}",
        "{%- capture className %}{{model.Table.Name | UpperCamel | Singular}}{% endcapture %}",
        "{%- capture viewModelClassName -%}{%- if model.IncludeParents == true -%}{{ className }}ViewModel{%- else -%}{{ className }}{%- endif -%}{%- endcapture -%}",        
        "public async Task<{{ className }}> Create({{ className }} item{% if model.UseQueryOptions %}, {{ queryOption }}{% endif %})",
        "{",
        "\tif (item == null)",
        "\t{",
        "\t\tthrow new ArgumentNullException();",
        "\t}",
        "\t{% if model.Table.UsesGuidAsPrimaryKey %}{% for pk in model.Table.PrimaryKeys %}if (item.{{pk.Name}} == Guid.Empty)",
        "\t{",
        "\t\titem.{{pk.Name}} = Guid.NewGuid();",
        "\t}{% endfor %}{% endif %}",
        "",
        "\tusing (var connection =  _{{model.ConnectionVariable}}.{{model.ConnectionMethod}})",
        "\t{",
        "\t\tvar sql = @\"",
        "{% sqlInsert %};",
        "{% if model.Table.UsesIdentityColumn %}\tdeclare @itemId int = SCOPE_IDENTITY();",
        "\tselect @itemId;{% endif %}",
        "\";",
        "\t\ttry",
        "\t\t{",
        "{% if model.Table.UsesIdentityColumn %}",
        "\t\t\tvar sqlCreateId = await connection.ExecuteScalarAsync<int>(sql, new { {% propertyList %}{% if model.UseQueryOptions %}, ApplicationUserId = queryOption.{{appUserId}}{% endif %} });",
        "\t\t\tif (sqlCreateId > 0)",
        "\t\t\t{",
        "\t\t\t\tvar entity = await this.Get(sqlCreateId{% if model.UseQueryOptions %}, queryOption{% endif %});",
        "\t\t\t\treturn entity;",
        "\t\t\t}",
        "\t\t\telse",
        "\t\t\t{",
        "\t\t\t\treturn null;",
        "\t\t\t}",
        "{% else %}",
        "\t\t\tvar sqlCreateResult = await connection.ExecuteAsync(sql, new { {% propertyList %}{% if model.UseQueryOptions %}, ApplicationUserId = queryOption.{{appUserId}}{% endif %} });",
        "\t\t\tif (sqlCreateResult > 0)",
        "\t\t\t{",
        "{% capture itemKeys %}{% for pk in model.Table.PrimaryKeys %}{% if forloop.first == false %}, {% endif %}item.{{ pk.PropertyName }}{% endfor %}{% endcapture %}",
        "\t\t\t\tvar entity = await this.Get({{itemKeys}}{% if model.UseQueryOptions %}, queryOption{% endif %});",
        "\t\t\t\treturn entity;",
        "\t\t\t}",
        "\t\t\telse",
        "\t\t\t{",
        "\t\t\t\treturn null;",
        "\t\t\t}",
        "{% endif %}",
        "\t\t}",
        "\t\tcatch(Exception exception)",
        "\t\t{",
        "\t\t\tSystem.Diagnostics.Debug.Print(exception.Message);",
        "\t\t\tthrow;",
        "\t\t}",
        "\t}",
        "}"
    ]
}