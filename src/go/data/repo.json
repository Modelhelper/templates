{
    "Key": "a54200df-f7b3-4b33-9bf9-521a3a5af63f",
    "Name": "repository-model-full",
    "Description": null,
    "Language": "go",
    "CanExport": true,
    "ExportFileName": "{{model.Table.Name | UpperCamel | Singular}}.go",
    "ExportType": "api.models",
    "TemplateType": 0,
    "Groups": [
      
    ],
    "Tags": null,
    "Body": [
"        package data",
"",
"import (",
"\"context\"",
"\"database/sql\"",
"\t\"fmt\"",
"\t\"patolab/cli/data/models\"",
"",
"\t_ \"github.com/denisenkom/go-mssqldb\"",
")",
"",
"\ttype {{model.Table.Name | UpperCamel | Singular}} struct {",
      "{%- for property in model.Table.Columns -%}{% capture dataType %}{{ property.DataType | CSharp }}{% endcapture -%}",
      "\t\t{% if property.IsIgnored %}// {% endif %}{{ property.PropertyName }} {{ dataType }}{% if property.IsNullable and dataType != 'string' %}?{% endif %}",
      "{%- endfor -%}",    
      "\t}",
      "",
"",
"type SampleRepository interface {",
"\t\tGet{{model.Table.Name | UpperCamel | plural}}(runID int, env string) (*[]models.{{model.Table.Name | UpperCamel | Singular}}, error)",
"}",
"",
"func Get{{model.Table.Name | UpperCamel | plural}}(runID int, env string) (*[]models.{{model.Table.Name | UpperCamel | Singular}}, error) {",
"\tdb, err := OpenConnection(env)",
"\tif err != nil {",
"\t\treturn nil, err",
"\t}",
"\tdefer db.Close()",
"",
"\tctx := context.Background()",
"",
"\tquery := `",
"\t{% sqlSelectAll %}",
"`",
"",
"",
"\tstmt, err := db.PrepareContext(ctx, fmt.Sprintf(query))",
"",
"\tif err != nil {",
"\t\treturn nil, err",
"\t}",
"\t// Execute query",
"\trows, err := stmt.Query(query, sql.Named(\"runId\", runID))",
"\tif err != nil {",
"\t\treturn nil, err",
"\t}",
"",
"\tdefer rows.Close()",
"",
"\tvar o models.{{model.Table.Name}}",
"",
"\tlist := []models.{{model.Table.Name}}{}",
"",
"\tfor rows.Next() {",
"\t\tif err := rows.Scan(",
"{%- for property in model.Table.Columns -%}{% capture dataType %}{{ property.DataType | CSharp }}{% endcapture -%}",
      "\t\t\t&o.{{ property.PropertyName }},",
      "{%- endfor -%}",    
"\t\t); err != nil {",
"\t\t\treturn nil, err",
"\t\t}",
"",
"\t\tlist = append(list, o)",
"\t}",
"\treturn &list, nil",
"}",

      ""
    ]
  }