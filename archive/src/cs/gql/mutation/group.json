{
    "Key": "a54200df-f7b3-4b33-9bf9-521a3a5af63f",
    "Name": "mutation-group",
    "Description": "Creates a <EGroup>Type file based on ObjectGraphType for GraphQL",
    "Language": "cs",
    "CanExport": true,
    "ExportFileName": "{{model.Table.Name | UpperCamel | Singular}}MutationGroup.cs",
    "ExportType": "gql.mutation.groups",
    "TemplateType": 0,
    "Groups": [
        "GraphQLCore","cs-gql-complete"
    ],
    "Tags": [
        "GraphQL",
        "Api",
        "Core"
    ],
    "typeMapper": "points to name",
    "dictionary": [
        {
            "key": "string",
            "value": "StringType"
        },
        {
            "key": "DateTime",
            "value": "DateTimeGraphType"
        }
    ],
    "Body": [
        "using System;",
        "using System.Linq;",
        "using System.Threading;",
        "using System.Threading.Tasks;",
        "using System.Collections.Generic;",
        "using GraphQL.Types;",
        "using GraphQL.DataLoader;",
        "using {{model.Namespaces[\"api.interfaces\"]}};",
        "using {{model.Namespaces[\"api.models\"]}};",
        "using {{model.Namespaces[\"gql.mutation.types\"]}};",
        "using {{model.Namespaces[\"gql.types\"]}};",
        "{% capture repo %}{{ model.Table.Name | LowerCamel | Singular }}Repository{% endcapture %}",
        "namespace {{model.Namespaces[\"gql.mutation.groups\"]}}",
        "{  {% capture className %}{{ model.Table.Name | UpperCamel | Singular }}{% endcapture %}",
        "\tpublic class {{className}}MutationGroup : ObjectGraphType",
        "\t{",
        "// copy to parent mutation group",
        "// Field<{{ className }}MutationGroup>(\"{{ model.Table.Name | LowerCamel | Plural }}\", resolve: context => new { });",
        "",
        "\t\tprivate const string itemName = \"item\";",
        "\t\tprivate readonly I{{ className }}Repository _{{repo}};",
        "",
        "\t\tpublic {{className}}MutationGroup(IDataLoaderContextAccessor accessor, I{{ className }}Repository {{ repo }})",
        "\t\t{",
        "",
        "\t\t\t_{{repo}} = {{ repo }};",
        "\t\t\tName = \"{{className}}Mutation\";",
        "\t\t\tDescription = \"update, create and delete data for the {{className}} entity  \";",
        "\t\t\tField<{{ className }}QueryType>(\"create\",",
        "\t\t\t\targuments: new QueryArguments(",
        "\t\t\t\t\tnew QueryArgument<NonNullGraphType<{{ className }}InputType>> { Name = itemName, Description = \"{{ className }} entity to update\" }",
        "\t\t\t\t),",
        "\t\t\t\tresolve: context =>",
        "\t\t\t\t{",
        "",
        "\t\t\t\t\tvar item = context.GetArgument<{{className}}>(itemName);",
        "\t\t\t\t\tvar itemArgument = context.Arguments.FirstOrDefault(i => i.Key == itemName);",
        "\t\t\t\t\tvar argumentValues = itemArgument.Value as Dictionary<string, object>;",
        "\t\t\t\t\tvar fields = argumentValues != null ? argumentValues.Select(t => t.Key).ToList() : new List<string>(); ;",
        "",
        "\t\t\t\t\treturn {{ repo }}.PatchCreate(item, fields);",
        "\t\t\t\t}",
        "\t\t\t);",
        "",
        "\t\t\tField<{{ className }}QueryType>(\"update\",",
        "\t\t\t\targuments: new QueryArguments(",
        "\t\t\t\t\tnew QueryArgument<NonNullGraphType<IntGraphType>> { Name = \"id\", Description = \"id of the {{ className }}\" },",
        "\t\t\t\t\tnew QueryArgument<NonNullGraphType<{{ className }}InputType>> { Name = itemName, Description = \"{{ className }} entity to update\" }",
        "\t\t\t\t),",
        "\t\t\t\tresolve: context =>",
        "\t\t\t\t{",
        "",
        "\t\t\t\t\tvar id = context.GetArgument<int>(\"id\");",
        "\t\t\t\t\tvar item = context.GetArgument<{{className}}>(itemName);",
        "\t\t\t\t\tvar itemArgument = context.Arguments.FirstOrDefault(i => i.Key == itemName);",
        "\t\t\t\t\tvar argumentValues = itemArgument.Value as Dictionary<string, object>;",
        "\t\t\t\t\tvar fields = argumentValues != null ? argumentValues.Select(t => t.Key).ToList() : new List<string>(); ;",
        "",
        "\t\t\t\t\treturn {{ repo }}.PatchUpdate(id, item, fields);",
        "\t\t\t\t}",
        "\t\t\t);",
        "",
        "\t\t\tField<ItemDeletedResultType>(\"delete\",",
        "\t\t\t\targuments: new QueryArguments(",
        "\t\t\t\t\tnew QueryArgument<NonNullGraphType<IntGraphType>> { Name = \"id\", Description = \"id of the {{ className }}\" }",
        "\t\t\t\t),",
        "\t\t\t\tresolve: context =>",
        "\t\t\t\t{",
        "",
        "\t\t\t\t\tvar id = context.GetArgument<int>(\"id\");",
        "",
        "\t\t\t\t\tvar result = {{ repo }}.Delete(id, null);",
        "\t\t\t\t\treturn new ItemDeletedResultViewModel {Id = id};",
        "\t\t\t\t}",
        "\t\t\t);",
        "\t\t}",
        "\t}",
        "}"
    ]
}