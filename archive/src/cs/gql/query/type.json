{
  "Key": "a54200df-f7b3-4b33-9bf9-521a3a5af63f",
  "Name": "repositotory-model-full",
  "Description": "Creates a <Entity>Type file based on ObjectGraphType for GraphQL",
  "Language": "cs",
  "CanExport": true,
  "ExportFileName": "{{model.Table.Name | UpperCamel | Singular}}QueryType.cs",
  "ExportType": "gql.types",
  "TemplateType": 0,
  "Groups": [
    "GraphQLCore", "cs-gql-complete"
  ],
  "Tags": ["GraphQL", "Api", "Core"],
  "typeMapper": "points to name",
  "dictionary": [
    { "key": "string", "value": "StringType"},
    { "key": "DateTime", "value": "DateTimeGraphType"}
  ],
  "Body": [
    "using System;",
    "using System.Threading;",
    "using System.Threading.Tasks;",
    "using System.Collections.Generic;",
    "using GraphQL.Types;",
    "using GraphQL.DataLoader;",
    "using {{model.Namespaces[\"api.interfaces\"]}};",
    "using {{model.Namespaces[\"api.models\"]}};",
    "{% capture repo %}{{ model.Table.Name | LowerCamel | Singular }}Repository{% endcapture %}",
    "namespace {{model.Namespaces[\"gql.types\"]}}",
    " {",
    "\tpublic class {{model.Table.Name | UpperCamel | Singular}}QueryType : ObjectGraphType<{{model.Table.Name | UpperCamel | Singular}}>",
    "\t{",
    "\t\tprivate readonly I{{ model.Table.Name | UpperCamel | Singular }}Repository _{{repo}};",
    "",
      "\t\tpublic {{model.Table.Name | UpperCamel | Singular}}QueryType(IDataLoaderContextAccessor accessor, I{{ model.Table.Name | UpperCamel | Singular }}Repository {{ repo }})", 
      "\t\t{", 
        "\t\t\t_{{repo}} = {{ repo }};", 
        "", 
        "\t\t\tName = \"{{model.Table.Name | UpperCamel | Singular}}\"; // the entity name => select * from {{ model.Table.Schema }}.[{{ model.Table.Name }}]", 
        "\t\t\tDescription = \"{{model.Table.Description}}\";", 
        "{%- for property in model.Table.Columns -%}{% capture dataType %}{{ property.DataType | CSharp }}{% endcapture -%}",
        "{%- capture nullable %}{%if property.IsNullable %}, nullable: true{% endif %}{% endcapture -%}", 
        "{%- capture description %}{%if property.Description.Length > 0 %}.Description(\"{{property.Description}}\"){% endif %}{% endcapture -%}", 
        "{%- capture name %}{%if property.IsIdentity > 0 %}.Name(\"id\"){% endif %}{% endcapture -%}", 
          "\t\t\t{% if property.IsIgnored %}// {% endif %}Field(t => t.{{ property.PropertyName }}{{ nullable }}){{name}}{{description}};",
          "{%- endfor -%}",            
          
          "{%- for child in model.Table.ChildRelations -%}{%- if child.GroupIndex == 1 -%}",
          "\t\t\tField<ListGraphType<{{ child.Name | UpperCamel | Singular }}QueryType>, IEnumerable<{{ child.Name | UpperCamel | Singular }}>>()",
          "\t\t\t\t.Name(\"{{child.ModelName | LowerCamel | Plural}}\")",
          "\t\t\t\t.ResolveAsync(ctx => ",
          "\t\t\t\t{",
          "\t\t\t\t\tvar dataLoader = accessor.Context.GetOrAddCollectionBatchLoader<{{ child.ParentColumnType  | CSharp }}, {{ child.Name | UpperCamel | Singular }}>(\"Get{{child.ModelName | UpperCamel | Plural}}\", {{ repo }}.Get{{child.ModelName | UpperCamel | Plural}});",
          "\t\t\t\t\treturn dataLoader.LoadAsync(ctx.Source.{{ child.ParentColumnName | UpperCamel | Singular }});",            
          "\t\t\t\t});",
          "{% endif -%}{%- endfor %}",        
          "",
          "{%- for parent in model.Table.ParentRelations -%}{%- if parent.GroupIndex == 1 -%}",
          "\t\t\tField<{{ parent.Name | UpperCamel | Singular }}QueryType, {{ parent.Name | UpperCamel | Singular }}>()",
          "\t\t\t\t.Name(\"{{parent.ModelName | LowerCamel | Singular}}\")",
          "\t\t\t\t.ResolveAsync(ctx => ",
          "\t\t\t\t{",
          "\t\t\t\t\tvar dataLoader = accessor.Context.GetOrAddBatchLoader<{{ parent.ChildColumnType  | CSharp }}, {{ parent.Name | UpperCamel | Singular }}>(\"Get{{parent.ModelName | UpperCamel | Plural}}\", Get{{parent.ModelName | UpperCamel | Plural}});",
          "\t\t\t\t\treturn dataLoader.LoadAsync(ctx.Source.{{ parent.ChildColumnName | UpperCamel | Singular }}{%- if parent.ChildColumnNullable %}.Value{% endif -%});",            
          "\t\t\t\t});",
          "",
          "{% endif -%}{%- endfor %}",        

      "\t\t}", 
      "",
      "{%- for parent in model.Table.ParentRelations -%}{%- if parent.GroupIndex == 1 -%}",
      "\t\tpublic async Task<IDictionary<{{ parent.ChildColumnType  | CSharp }}, {{ parent.Name | UpperCamel | Singular }}>> Get{{parent.ModelName | UpperCamel | Plural}}(IEnumerable<{{ parent.ChildColumnType  | CSharp }}> ids, CancellationToken cancellationToken)",
      "\t\t{",
      "\t\t\t//throw new System.NotImplementedException();",
      "\t\t\treturn await _{{ repo }}.Get{{parent.ModelName | UpperCamel | Singular}}(ids, cancellationToken);",
      "\t\t}",
      "",
      "{% endif -%}{%- endfor %}",  
    "\t}",
    "}"

  ]
}