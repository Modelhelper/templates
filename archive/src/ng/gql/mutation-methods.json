{    
    "Description": "",
    "Language": "ts",
    "CanExport": false,    
    "Tags": [
      "ng", "angular", "gql", "graphql"
    ],
    "Body": [
      "{%capture outputFields %}# output fields  {%- for column in model.Table.Columns %}",
      "\t\t\t\t\t{{ column.ContextualName | LowerCamel }}{%if forloop.last == false %}, {%endif%}{%endfor%}{%endcapture%}",      
      "{%capture inputVariableName %}{{ model.Table.Name | LowerCamel | Singular }}{% endcapture %}",
      "{%capture mutationItemName %}{{ model.Table.Name | UpperCamel | Singular }}Input{% endcapture %}",
      "//#region GraphQL API methods for {{ model.Table.Name | Singular }}",
  "create{{ model.Table.Name | Singular }}(item: {{ mutationItemName }}) { ",
  "const qry = gql`",
  "\tmutation create($item: {{ mutationItemName }}!) {",
    "\t\thistology {",
    "\t\t\t{{ model.Table.Name | LowerCamel | Plural }} {",
    "\t\t\t\tcreate(item: $item) {",    
    "\t\t\t\t\t{{ outputFields }}",
    "\t\t\t\t}",
    "\t\t\t}",
    "\t\t}",
  "\t}`;",
  "",
  "return this.apollo.mutate<any>({",
      "mutation: qry,",
      "variables: {",
        "item",
"      }",
    "});",
  "}",
  "{%capture ids %}{%for pk in model.Table.PrimaryKeys %}${{ pk.ContextualName | LowerCamel | Singular }}: {{ pk.DataType | Graphql }}!{%if forloop.last == false %}, {%endif%}{% endfor %}{% endcapture %}",
  "update{{ model.Table.Name | Singular }}({%for pk in model.Table.PrimaryKeys %}{{ pk.ContextualName | LowerCamel | Singular }}: {{ pk.DataType | TypeScript }}{%if forloop.last == false %}, {%endif%}{% endfor %}, item: {{ mutationItemName }}) { ",
  "\tconst qry = gql`",
  "\tmutation update({{ids}}, $item: {{ mutationItemName }}!) {",
  "\t\thistology {",
    "\t\t\t{{ model.Table.Name | LowerCamel | Plural }} {",
    "\t\t\t\tupdate({%for pk in model.Table.PrimaryKeys %}{{ pk.ContextualName | LowerCamel | Singular }}: ${{ pk.ContextualName | LowerCamel | Singular }}{%if forloop.last == false %}, {%endif%}{% endfor %}, item: $item) {",
    "\t\t\t\t\t{{ outputFields }}",
    "\t\t\t\t}",
    "\t\t\t}",
    "\t\t}",
  "\t}`;",
  "",
  "\treturn this.apollo.mutate<any>({",
      "\t\tmutation: qry,",
      "\t\tvariables: {",
        "{%for pk in model.Table.PrimaryKeys %}\t\t\t{{ pk.ContextualName | LowerCamel | Singular }}, ", 
        "{% endfor -%}",
        "\t\t\titem",
"\t\t}",
    "\t\t});",
  "}",
  "",

  "delete{{ model.Table.Name | Singular }}({%for pk in model.Table.PrimaryKeys %}{{ pk.ContextualName | LowerCamel | Singular }}: {{ pk.DataType | TypeScript }}{%if forloop.last == false %}, {%endif%}{% endfor %}) { ",
  "\tconst qry = gql`",
  "\tmutation delete({{ids}}) {",
  "\t\thistology {",
    "\t\t\t{{ model.Table.Name | LowerCamel | Plural }} {",
    "\t\t\t\tdelete({%for pk in model.Table.PrimaryKeys %}{{ pk.ContextualName | LowerCamel | Singular }}: ${{ pk.ContextualName | LowerCamel | Singular }}{% endfor %})",
    "\t\t\t\t\tid result deleted",
    "\t\t\t\t}",
    "\t\t\t}",
    "\t\t}",
  "\t}`;",
  "",
  "\treturn this.apollo.mutate<any>({",
      "\t\tmutation: qry,",
      "\t\tvariables: {",
        "{%for pk in model.Table.PrimaryKeys %}\t\t\t{{ pk.ContextualName | LowerCamel | Singular }} ", 
        "{% endfor -%}",
        
"\t\t}",
    "\t\t});",
  "}",
  "//#endregion"
    ]
  }