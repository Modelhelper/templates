{
    "Key": "ts.ng.component.index",
    "Name": "angular-component-index",
    "Description": null,
    "Language": "cs",
    "CanExport": true,
    "ExportFileName": "{{model.Table.Name | KebabCase | Singular}}-table.component.ts",
    "ExportType": "ng.table-component",
    "TemplateType": 0,
    "Groups": [
        "ng-spa",
        "ng-ui",
        "ng-table"
    ],
    "Tags": null,
    "Body": [
        "{%- capture kebabName %}{{ model.Table.Name | KebabCase | Singular }}{% endcapture -%}",
        "{%- capture className %}{{ model.Table.Name | UpperCamel | Singular }}{% endcapture -%}",
        "{%- capture propertyName %}{{ model.Table.Name | KebabCase | Singular  }}{% endcapture -%}",
        "import { Component, OnInit, Input, ViewChild, AfterViewInit, OnChanges, Output, EventEmitter } from '@angular/core';",
        "import { MatSort, MatTableDataSource, MatPaginator } from '@angular/material';",
        "",
        "@Component({",
        "\tselector: 'app-{{ propertyName }}-table',",
        "\ttemplateUrl: './{{ kebabName }}-table.component.html',",
        "\tstyles: []",
        "})",
        "export class {{ className }}TableComponent implements OnInit, AfterViewInit, OnChanges {",
        "",
        " \tdataSource = new MatTableDataSource<any>([]);",
        "",
        "\t@Input() displayedColumns: string[] = [",
        "\t{% for prop in model.Table.Columns -%}",
        "\t\t'{{ prop.Name | LowerCamel | Singular }}'{% if forloop.last == false %}, {% endif %}",
        "\t{%- endfor -%}",
        "{%- if model.Table.IncludeParentRelations -%}",
        "{%- for relation in model.Table.ParentRelations-%}\t\t",
        "{%- for relatedColumn in relation.ViewModelColumns-%}",
        "\t\t, '{{ relatedColumn.PropertyName | LowerCamel | Singular}}'\t",
        "{%- endfor -%}\t",
        "{%- endfor -%}\t",
        "{%- endif -%}",
        "\t];",
        "",
        "\t@Input() data: any[] = [];",
        "\t@Input() filter: '';",
        "\t@Input() enableSort: Boolean = true;",
        "\t@Input() enablePaging: Boolean = true;",
        "\t@Input() showActionButton: Boolean = true;",
        "\t@Input() enableDeleteButton = true;",
        "\t@Input() enableEditButton = true;",
        "\t// @Input() enableFavoriteButton = false;",
        "",
        "\t@Output() onSelect: EventEmitter<any> = new EventEmitter();",
        "\t@Output() onDelete: EventEmitter<any> = new EventEmitter();",
                "\t@Output() onEdit: EventEmitter<any> = new EventEmitter();",
        "\t@Output() onClick: EventEmitter<any> = new EventEmitter();",
        "\t@Output() onRowClick: EventEmitter<any> = new EventEmitter();",
        "\t@Output() onCreate: EventEmitter<any> = new EventEmitter();",
        "\t// @Output() onFavoriteAdd: EventEmitter<any> = new EventEmitter();",
        "\t// @Output() onFavoriteRemove: EventEmitter<any> = new EventEmitter();",
        "",
        "\t@ViewChild(MatSort) sort: MatSort;",
        "\t@ViewChild(MatPaginator) paginator: MatPaginator;",
        "",
        "\tconstructor() { }",
        "",
        "\thandleDelete(item: any) {",
        "\t\tthis.onDelete.emit(item);",
        "\t}",
        "",
                "",
                "\thandleEdit(item: any) {",
                "\t\tthis.onEdit.emit(item);",
                "\t}",
                "\t",
        "  handleClick(item: any) {",
        "    console.log('click the item');",
        "    ",
        "    this.onClick.emit(item);",
        "    // ",
        "  }",
        "",
        "  handleRowClick(item: any) {",
        "    console.log('click the row');",
        "",
        "    this.onRowClick.emit(item);",
        "    ",
        "  }",
        "",
        "  applyFilter(filterValue: string) {",
        "    if (filterValue !== undefined) {",
        "      filterValue = filterValue.trim(); // Remove whitespace",
        "      filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches",
        "    }",
        "    ",
        "    this.dataSource.filter = filterValue;",
        "  }",
        "",
        "  ngAfterViewInit() {",
        "",
        "    this.dataSource.sort = this.enableSort ? this.sort : null;",
        "",
        "    if (this.enablePaging) {",
        "      this.dataSource.paginator = this.paginator;",
        "    }",
        "    ",
        "  }",
        "",
        "  ngOnInit() {",
        "    ",
        "  }",
        "",
        "  ngOnChanges() {",
        "    this.dataSource.data = this.data;",
        "    ",
        "    this.dataSource.sort = this.enableSort ? this.sort : null;",
        "    this.dataSource.paginator = this.enablePaging ? this.paginator : null;    ",
        "    this.applyFilter(this.filter);",
        "  }",
        "}",
        "",
        "",
        "",
        "",
        ""
    ]
}